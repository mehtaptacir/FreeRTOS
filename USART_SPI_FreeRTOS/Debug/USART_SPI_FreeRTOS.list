
USART_SPI_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005468  08005468  00015468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800556c  0800556c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800556c  0800556c  0001556c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005574  08005574  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005574  08005574  00015574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800557c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040dc  20000074  080055f0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004150  080055f0  00024150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb74  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002393  00000000  00000000  0002ec18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  00030fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b80  00000000  00000000  00031c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ed8  00000000  00000000  000327c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a487  00000000  00000000  000546a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc48c  00000000  00000000  0005eb27  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012afb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000370c  00000000  00000000  0012b030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005450 	.word	0x08005450

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005450 	.word	0x08005450

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <vApplicationGetIdleTaskMemory+0x30>)
 8000dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000090 	.word	0x20000090
 8000dec:	200000e4 	.word	0x200000e4

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b5b0      	push	{r4, r5, r7, lr}
 8000df2:	b08e      	sub	sp, #56	; 0x38
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df6:	f000 fbc1 	bl	800157c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfa:	f000 f835 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfe:	f000 f8f1 	bl	8000fe4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e02:	f000 f88f 	bl	8000f24 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000e06:	f000 f8c3 	bl	8000f90 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of EmergencyLed */
  osThreadDef(EmergencyLed, EmergencyLed_Handler, osPriorityHigh, 0, 128);
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <main+0x68>)
 8000e0c:	f107 041c 	add.w	r4, r7, #28
 8000e10:	461d      	mov	r5, r3
 8000e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EmergencyLedHandle = osThreadCreate(osThread(EmergencyLed), NULL);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fc40 	bl	80036aa <osThreadCreate>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <main+0x6c>)
 8000e2e:	601a      	str	r2, [r3, #0]

  /* definition and creation of ReadTemperature */
  osThreadDef(ReadTemperature, ReadTemperature_Handler, osPriorityRealtime, 0, 128);
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <main+0x70>)
 8000e32:	463c      	mov	r4, r7
 8000e34:	461d      	mov	r5, r3
 8000e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadTemperatureHandle = osThreadCreate(osThread(ReadTemperature), NULL);
 8000e42:	463b      	mov	r3, r7
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 fc2f 	bl	80036aa <osThreadCreate>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <main+0x74>)
 8000e50:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e52:	f002 fc23 	bl	800369c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <main+0x66>
 8000e58:	08005478 	.word	0x08005478
 8000e5c:	200040ac 	.word	0x200040ac
 8000e60:	080054a4 	.word	0x080054a4
 8000e64:	200040a8 	.word	0x200040a8

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b094      	sub	sp, #80	; 0x50
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0320 	add.w	r3, r7, #32
 8000e72:	2230      	movs	r2, #48	; 0x30
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 fee5 	bl	8004c46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <SystemClock_Config+0xb4>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <SystemClock_Config+0xb4>)
 8000e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <SystemClock_Config+0xb4>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <SystemClock_Config+0xb8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <SystemClock_Config+0xb8>)
 8000eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <SystemClock_Config+0xb8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ecc:	2310      	movs	r3, #16
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed4:	f107 0320 	add.w	r3, r7, #32
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fe97 	bl	8001c0c <HAL_RCC_OscConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ee4:	f000 f9f0 	bl	80012c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee8:	230f      	movs	r3, #15
 8000eea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 f8f2 	bl	80020ec <HAL_RCC_ClockConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f0e:	f000 f9db 	bl	80012c8 <Error_Handler>
  }
}
 8000f12:	bf00      	nop
 8000f14:	3750      	adds	r7, #80	; 0x50
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40007000 	.word	0x40007000

08000f24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f2a:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <MX_SPI1_Init+0x68>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f70:	220a      	movs	r2, #10
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_SPI1_Init+0x64>)
 8000f76:	f001 fa85 	bl	8002484 <HAL_SPI_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f80:	f000 f9a2 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200040b0 	.word	0x200040b0
 8000f8c:	40013000 	.word	0x40013000

08000f90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <MX_USART2_UART_Init+0x50>)
 8000f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000f9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fc8:	f001 fe7c 	bl	8002cc4 <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fd2:	f000 f979 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20004108 	.word	0x20004108
 8000fe0:	40004400 	.word	0x40004400

08000fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <MX_GPIO_Init+0xa8>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a22      	ldr	r2, [pc, #136]	; (800108c <MX_GPIO_Init+0xa8>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <MX_GPIO_Init+0xa8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_GPIO_Init+0xa8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <MX_GPIO_Init+0xa8>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_GPIO_Init+0xa8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	2110      	movs	r1, #16
 8001036:	4816      	ldr	r0, [pc, #88]	; (8001090 <MX_GPIO_Init+0xac>)
 8001038:	f000 fdb4 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <MX_GPIO_Init+0xb0>)
 8001044:	f000 fdae 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001048:	2310      	movs	r3, #16
 800104a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4619      	mov	r1, r3
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <MX_GPIO_Init+0xac>)
 8001060:	f000 fc06 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001064:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_GPIO_Init+0xb0>)
 800107e:	f000 fbf7 	bl	8001870 <HAL_GPIO_Init>

}
 8001082:	bf00      	nop
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020c00 	.word	0x40020c00

08001098 <Read_Temperature>:

/* USER CODE BEGIN 4 */
float Read_Temperature(uint16_t * p)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	uint8_t value[2]={0};
 80010a0:	2300      	movs	r3, #0
 80010a2:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2110      	movs	r1, #16
 80010a8:	481b      	ldr	r0, [pc, #108]	; (8001118 <Read_Temperature+0x80>)
 80010aa:	f000 fd7b 	bl	8001ba4 <HAL_GPIO_WritePin>

	HAL_SPI_Receive(&hspi1, value, 2, 100);
 80010ae:	f107 010c 	add.w	r1, r7, #12
 80010b2:	2364      	movs	r3, #100	; 0x64
 80010b4:	2202      	movs	r2, #2
 80010b6:	4819      	ldr	r0, [pc, #100]	; (800111c <Read_Temperature+0x84>)
 80010b8:	f001 fa48 	bl	800254c <HAL_SPI_Receive>

    *p =(uint16_t) (value[1]>> 3);
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	801a      	strh	r2, [r3, #0]

	*p|=(uint16_t) (value[0]<< 5);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	881a      	ldrh	r2, [r3, #0]
 80010cc:	7b3b      	ldrb	r3, [r7, #12]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	015b      	lsls	r3, r3, #5
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2110      	movs	r1, #16
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <Read_Temperature+0x80>)
 80010e2:	f000 fd5f 	bl	8001ba4 <HAL_GPIO_WritePin>



	return 0.25 *(*p);;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa1a 	bl	8000524 <__aeabi_i2d>
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <Read_Temperature+0x88>)
 80010f6:	f7ff fa7f 	bl	80005f8 <__aeabi_dmul>
 80010fa:	4603      	mov	r3, r0
 80010fc:	460c      	mov	r4, r1
 80010fe:	4618      	mov	r0, r3
 8001100:	4621      	mov	r1, r4
 8001102:	f7ff fc8b 	bl	8000a1c <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	ee07 3a90 	vmov	s15, r3

}
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bd90      	pop	{r4, r7, pc}
 8001116:	bf00      	nop
 8001118:	40020000 	.word	0x40020000
 800111c:	200040b0 	.word	0x200040b0
 8001120:	3fd00000 	.word	0x3fd00000

08001124 <EmergencyLed_Handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_EmergencyLed_Handler */
void EmergencyLed_Handler(void const * argument)
{
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  osPriority ledp, tempp;
  /* Infinite loop */
  sprintf(tx_message,"emergency alert system is on..\n");
 800112c:	4a31      	ldr	r2, [pc, #196]	; (80011f4 <EmergencyLed_Handler+0xd0>)
 800112e:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <EmergencyLed_Handler+0xd4>)
 8001130:	4614      	mov	r4, r2
 8001132:	461d      	mov	r5, r3
 8001134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001138:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800113c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HAL_UART_Transmit(&huart2, tx_message, strlen(tx_message), 1000);
 8001140:	482c      	ldr	r0, [pc, #176]	; (80011f4 <EmergencyLed_Handler+0xd0>)
 8001142:	f7ff f845 	bl	80001d0 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	b29a      	uxth	r2, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	4929      	ldr	r1, [pc, #164]	; (80011f4 <EmergencyLed_Handler+0xd0>)
 8001150:	482a      	ldr	r0, [pc, #168]	; (80011fc <EmergencyLed_Handler+0xd8>)
 8001152:	f001 fe04 	bl	8002d5e <HAL_UART_Transmit>
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12 |GPIO_PIN_13 |GPIO_PIN_14 |GPIO_PIN_15);
 8001156:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800115a:	4829      	ldr	r0, [pc, #164]	; (8001200 <EmergencyLed_Handler+0xdc>)
 800115c:	f000 fd3b 	bl	8001bd6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001160:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001164:	f000 fa7c 	bl	8001660 <HAL_Delay>
      temperature=Read_Temperature(&temp);
 8001168:	4826      	ldr	r0, [pc, #152]	; (8001204 <EmergencyLed_Handler+0xe0>)
 800116a:	f7ff ff95 	bl	8001098 <Read_Temperature>
 800116e:	eef0 7a40 	vmov.f32	s15, s0
 8001172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001176:	edc7 7a00 	vstr	s15, [r7]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <EmergencyLed_Handler+0xe4>)
 8001180:	701a      	strb	r2, [r3, #0]

     if(temperature<=40)
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <EmergencyLed_Handler+0xe4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b28      	cmp	r3, #40	; 0x28
 8001188:	d8e5      	bhi.n	8001156 <EmergencyLed_Handler+0x32>
     {
    	 sprintf(tx_message,"emergency alert system is off..\n");
 800118a:	4a1a      	ldr	r2, [pc, #104]	; (80011f4 <EmergencyLed_Handler+0xd0>)
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <EmergencyLed_Handler+0xe8>)
 800118e:	4614      	mov	r4, r2
 8001190:	461d      	mov	r5, r3
 8001192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119a:	682b      	ldr	r3, [r5, #0]
 800119c:	7023      	strb	r3, [r4, #0]
    	 HAL_UART_Transmit(&huart2, tx_message, strlen(tx_message), 1000);
 800119e:	4815      	ldr	r0, [pc, #84]	; (80011f4 <EmergencyLed_Handler+0xd0>)
 80011a0:	f7ff f816 	bl	80001d0 <strlen>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ac:	4911      	ldr	r1, [pc, #68]	; (80011f4 <EmergencyLed_Handler+0xd0>)
 80011ae:	4813      	ldr	r0, [pc, #76]	; (80011fc <EmergencyLed_Handler+0xd8>)
 80011b0:	f001 fdd5 	bl	8002d5e <HAL_UART_Transmit>

    	 tempp=osThreadGetPriority(ReadTemperatureHandle);
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <EmergencyLed_Handler+0xec>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fad7 	bl	800376c <osThreadGetPriority>
 80011be:	4603      	mov	r3, r0
 80011c0:	81fb      	strh	r3, [r7, #14]
    	 ledp=osThreadGetPriority(EmergencyLedHandle);
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <EmergencyLed_Handler+0xf0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 fad0 	bl	800376c <osThreadGetPriority>
 80011cc:	4603      	mov	r3, r0
 80011ce:	81bb      	strh	r3, [r7, #12]

    	 osThreadSetPriority(EmergencyLedHandle, tempp);
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <EmergencyLed_Handler+0xf0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fab1 	bl	8003742 <osThreadSetPriority>
    	 osThreadSetPriority(ReadTemperatureHandle,ledp);
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <EmergencyLed_Handler+0xec>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 faa9 	bl	8003742 <osThreadSetPriority>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12 |GPIO_PIN_13 |GPIO_PIN_14 |GPIO_PIN_15);
 80011f0:	e7b1      	b.n	8001156 <EmergencyLed_Handler+0x32>
 80011f2:	bf00      	nop
 80011f4:	200002e8 	.word	0x200002e8
 80011f8:	080054c0 	.word	0x080054c0
 80011fc:	20004108 	.word	0x20004108
 8001200:	40020c00 	.word	0x40020c00
 8001204:	2000034c 	.word	0x2000034c
 8001208:	200002e4 	.word	0x200002e4
 800120c:	080054e0 	.word	0x080054e0
 8001210:	200040a8 	.word	0x200040a8
 8001214:	200040ac 	.word	0x200040ac

08001218 <ReadTemperature_Handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadTemperature_Handler */
void ReadTemperature_Handler(void const * argument)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	osPriority ledp, tempp;
    float t;
  /* Infinite loop */
  for(;;)
  {
      temperature=Read_Temperature(&temp);
 8001220:	4822      	ldr	r0, [pc, #136]	; (80012ac <ReadTemperature_Handler+0x94>)
 8001222:	f7ff ff39 	bl	8001098 <Read_Temperature>
 8001226:	eef0 7a40 	vmov.f32	s15, s0
 800122a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800122e:	edc7 7a00 	vstr	s15, [r7]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <ReadTemperature_Handler+0x98>)
 8001238:	701a      	strb	r2, [r3, #0]
     HAL_Delay(500);
 800123a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800123e:	f000 fa0f 	bl	8001660 <HAL_Delay>
     sprintf(tx_message,"\ntemperature:%d \n",temperature);
 8001242:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <ReadTemperature_Handler+0x98>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	491a      	ldr	r1, [pc, #104]	; (80012b4 <ReadTemperature_Handler+0x9c>)
 800124a:	481b      	ldr	r0, [pc, #108]	; (80012b8 <ReadTemperature_Handler+0xa0>)
 800124c:	f003 fd04 	bl	8004c58 <siprintf>

     HAL_UART_Transmit(&huart2, (uint8_t*)tx_message, strlen(tx_message), 1000);
 8001250:	4819      	ldr	r0, [pc, #100]	; (80012b8 <ReadTemperature_Handler+0xa0>)
 8001252:	f7fe ffbd 	bl	80001d0 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29a      	uxth	r2, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	4916      	ldr	r1, [pc, #88]	; (80012b8 <ReadTemperature_Handler+0xa0>)
 8001260:	4816      	ldr	r0, [pc, #88]	; (80012bc <ReadTemperature_Handler+0xa4>)
 8001262:	f001 fd7c 	bl	8002d5e <HAL_UART_Transmit>



     if(temperature>=40 )
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <ReadTemperature_Handler+0x98>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b27      	cmp	r3, #39	; 0x27
 800126c:	d9d8      	bls.n	8001220 <ReadTemperature_Handler+0x8>
     {
    	 tempp=osThreadGetPriority(ReadTemperatureHandle);
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <ReadTemperature_Handler+0xa8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fa7a 	bl	800376c <osThreadGetPriority>
 8001278:	4603      	mov	r3, r0
 800127a:	81fb      	strh	r3, [r7, #14]
    	 ledp=osThreadGetPriority(EmergencyLedHandle);
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <ReadTemperature_Handler+0xac>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f002 fa73 	bl	800376c <osThreadGetPriority>
 8001286:	4603      	mov	r3, r0
 8001288:	81bb      	strh	r3, [r7, #12]

    	 osThreadSetPriority(EmergencyLedHandle, tempp);
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <ReadTemperature_Handler+0xac>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f002 fa54 	bl	8003742 <osThreadSetPriority>
    	 osThreadSetPriority(ReadTemperatureHandle,ledp);
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <ReadTemperature_Handler+0xa8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 fa4c 	bl	8003742 <osThreadSetPriority>
      temperature=Read_Temperature(&temp);
 80012aa:	e7b9      	b.n	8001220 <ReadTemperature_Handler+0x8>
 80012ac:	2000034c 	.word	0x2000034c
 80012b0:	200002e4 	.word	0x200002e4
 80012b4:	08005504 	.word	0x08005504
 80012b8:	200002e8 	.word	0x200002e8
 80012bc:	20004108 	.word	0x20004108
 80012c0:	200040a8 	.word	0x200040a8
 80012c4:	200040ac 	.word	0x200040ac

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ce:	e7fe      	b.n	80012ce <Error_Handler+0x6>

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_MspInit+0x54>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a11      	ldr	r2, [pc, #68]	; (8001324 <HAL_MspInit+0x54>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_MspInit+0x54>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_MspInit+0x54>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <HAL_MspInit+0x54>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_MspInit+0x54>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	210f      	movs	r1, #15
 8001312:	f06f 0001 	mvn.w	r0, #1
 8001316:	f000 fa82 	bl	800181e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800

08001328 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_SPI_MspInit+0x84>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12b      	bne.n	80013a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_SPI_MspInit+0x88>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_SPI_MspInit+0x88>)
 8001354:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_SPI_MspInit+0x88>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_SPI_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_SPI_MspInit+0x88>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_SPI_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001382:	23e0      	movs	r3, #224	; 0xe0
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001392:	2305      	movs	r3, #5
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <HAL_SPI_MspInit+0x8c>)
 800139e:	f000 fa67 	bl	8001870 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40013000 	.word	0x40013000
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000

080013b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_UART_MspInit+0x84>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d12b      	bne.n	8001432 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a10      	ldr	r2, [pc, #64]	; (8001440 <HAL_UART_MspInit+0x88>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_UART_MspInit+0x88>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001412:	230c      	movs	r3, #12
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001422:	2307      	movs	r3, #7
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_UART_MspInit+0x8c>)
 800142e:	f000 fa1f 	bl	8001870 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	; 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40004400 	.word	0x40004400
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800144c:	e7fe      	b.n	800144c <NMI_Handler+0x4>

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <MemManage_Handler+0x4>

0800145a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler+0x4>

08001466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001478:	f000 f8d2 	bl	8001620 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800147c:	f002 ff78 	bl	8004370 <xTaskGetSchedulerState>
 8001480:	4603      	mov	r3, r0
 8001482:	2b01      	cmp	r3, #1
 8001484:	d001      	beq.n	800148a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001486:	f003 f947 	bl	8004718 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <_sbrk+0x5c>)
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <_sbrk+0x60>)
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <_sbrk+0x64>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <_sbrk+0x68>)
 80014b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d207      	bcs.n	80014d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c0:	f003 fb8c 	bl	8004bdc <__errno>
 80014c4:	4602      	mov	r2, r0
 80014c6:	230c      	movs	r3, #12
 80014c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	e009      	b.n	80014e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <_sbrk+0x64>)
 80014e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20020000 	.word	0x20020000
 80014f0:	00000400 	.word	0x00000400
 80014f4:	20000350 	.word	0x20000350
 80014f8:	20004150 	.word	0x20004150

080014fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <SystemInit+0x28>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <SystemInit+0x28>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <SystemInit+0x28>)
 8001512:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001516:	609a      	str	r2, [r3, #8]
#endif
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001560 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800152c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800152e:	e003      	b.n	8001538 <LoopCopyDataInit>

08001530 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001532:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001534:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001536:	3104      	adds	r1, #4

08001538 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800153c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800153e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001540:	d3f6      	bcc.n	8001530 <CopyDataInit>
  ldr  r2, =_sbss
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001544:	e002      	b.n	800154c <LoopFillZerobss>

08001546 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001546:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001548:	f842 3b04 	str.w	r3, [r2], #4

0800154c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800154e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001550:	d3f9      	bcc.n	8001546 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001552:	f7ff ffd3 	bl	80014fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001556:	f003 fb47 	bl	8004be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155a:	f7ff fc49 	bl	8000df0 <main>
  bx  lr    
 800155e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001560:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001564:	0800557c 	.word	0x0800557c
  ldr  r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800156c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001570:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001574:	20004150 	.word	0x20004150

08001578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC_IRQHandler>
	...

0800157c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <HAL_Init+0x40>)
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_Init+0x40>)
 8001592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001596:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_Init+0x40>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 f92f 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015aa:	200f      	movs	r0, #15
 80015ac:	f000 f808 	bl	80015c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b0:	f7ff fe8e 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_InitTick+0x54>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_InitTick+0x58>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f939 	bl	8001856 <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00e      	b.n	800160c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d80a      	bhi.n	800160a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f000 f90f 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001600:	4a06      	ldr	r2, [pc, #24]	; (800161c <HAL_InitTick+0x5c>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000000 	.word	0x20000000
 8001618:	20000008 	.word	0x20000008
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008
 8001644:	20004148 	.word	0x20004148

08001648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20004148 	.word	0x20004148

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff ffee 	bl	8001648 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_Delay+0x40>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffde 	bl	8001648 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000008 	.word	0x20000008

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff8e 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff47 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff5c 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff8e 	bl	800175c <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5d 	bl	8001708 <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffb0 	bl	80017c4 <SysTick_Config>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e16b      	b.n	8001b64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800188c:	2201      	movs	r2, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	f040 815a 	bne.w	8001b5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d00b      	beq.n	80018ca <HAL_GPIO_Init+0x5a>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018be:	2b11      	cmp	r3, #17
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b12      	cmp	r3, #18
 80018c8:	d130      	bne.n	800192c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001900:	2201      	movs	r2, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 0201 	and.w	r2, r3, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0xfc>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b12      	cmp	r3, #18
 800196a:	d123      	bne.n	80019b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	08da      	lsrs	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3208      	adds	r2, #8
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	220f      	movs	r2, #15
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	08da      	lsrs	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3208      	adds	r2, #8
 80019ae:	69b9      	ldr	r1, [r7, #24]
 80019b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80b4 	beq.w	8001b5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <HAL_GPIO_Init+0x308>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a5e      	ldr	r2, [pc, #376]	; (8001b78 <HAL_GPIO_Init+0x308>)
 8001a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b5c      	ldr	r3, [pc, #368]	; (8001b78 <HAL_GPIO_Init+0x308>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a12:	4a5a      	ldr	r2, [pc, #360]	; (8001b7c <HAL_GPIO_Init+0x30c>)
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a51      	ldr	r2, [pc, #324]	; (8001b80 <HAL_GPIO_Init+0x310>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d02b      	beq.n	8001a96 <HAL_GPIO_Init+0x226>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a50      	ldr	r2, [pc, #320]	; (8001b84 <HAL_GPIO_Init+0x314>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d025      	beq.n	8001a92 <HAL_GPIO_Init+0x222>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4f      	ldr	r2, [pc, #316]	; (8001b88 <HAL_GPIO_Init+0x318>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d01f      	beq.n	8001a8e <HAL_GPIO_Init+0x21e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4e      	ldr	r2, [pc, #312]	; (8001b8c <HAL_GPIO_Init+0x31c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d019      	beq.n	8001a8a <HAL_GPIO_Init+0x21a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4d      	ldr	r2, [pc, #308]	; (8001b90 <HAL_GPIO_Init+0x320>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_GPIO_Init+0x216>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4c      	ldr	r2, [pc, #304]	; (8001b94 <HAL_GPIO_Init+0x324>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00d      	beq.n	8001a82 <HAL_GPIO_Init+0x212>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4b      	ldr	r2, [pc, #300]	; (8001b98 <HAL_GPIO_Init+0x328>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d007      	beq.n	8001a7e <HAL_GPIO_Init+0x20e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4a      	ldr	r2, [pc, #296]	; (8001b9c <HAL_GPIO_Init+0x32c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_GPIO_Init+0x20a>
 8001a76:	2307      	movs	r3, #7
 8001a78:	e00e      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	e00c      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a7e:	2306      	movs	r3, #6
 8001a80:	e00a      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a82:	2305      	movs	r3, #5
 8001a84:	e008      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a86:	2304      	movs	r3, #4
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e004      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x228>
 8001a96:	2300      	movs	r3, #0
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	f002 0203 	and.w	r2, r2, #3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa8:	4934      	ldr	r1, [pc, #208]	; (8001b7c <HAL_GPIO_Init+0x30c>)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ada:	4a31      	ldr	r2, [pc, #196]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ae0:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b04:	4a26      	ldr	r2, [pc, #152]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0a:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b58:	4a11      	ldr	r2, [pc, #68]	; (8001ba0 <HAL_GPIO_Init+0x330>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b0f      	cmp	r3, #15
 8001b68:	f67f ae90 	bls.w	800188c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	3724      	adds	r7, #36	; 0x24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40013800 	.word	0x40013800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020400 	.word	0x40020400
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020c00 	.word	0x40020c00
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40021400 	.word	0x40021400
 8001b98:	40021800 	.word	0x40021800
 8001b9c:	40021c00 	.word	0x40021c00
 8001ba0:	40013c00 	.word	0x40013c00

08001ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc0:	e003      	b.n	8001bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	041a      	lsls	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	619a      	str	r2, [r3, #24]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	887b      	ldrh	r3, [r7, #2]
 8001be8:	401a      	ands	r2, r3
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d104      	bne.n	8001bfa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	041a      	lsls	r2, r3, #16
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001bf8:	e002      	b.n	8001c00 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	619a      	str	r2, [r3, #24]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e25b      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d075      	beq.n	8001d16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c2a:	4ba3      	ldr	r3, [pc, #652]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d00c      	beq.n	8001c50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c36:	4ba0      	ldr	r3, [pc, #640]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d112      	bne.n	8001c68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c42:	4b9d      	ldr	r3, [pc, #628]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c4e:	d10b      	bne.n	8001c68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	4b99      	ldr	r3, [pc, #612]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d05b      	beq.n	8001d14 <HAL_RCC_OscConfig+0x108>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d157      	bne.n	8001d14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e236      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c70:	d106      	bne.n	8001c80 <HAL_RCC_OscConfig+0x74>
 8001c72:	4b91      	ldr	r3, [pc, #580]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a90      	ldr	r2, [pc, #576]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e01d      	b.n	8001cbc <HAL_RCC_OscConfig+0xb0>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x98>
 8001c8a:	4b8b      	ldr	r3, [pc, #556]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a8a      	ldr	r2, [pc, #552]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b88      	ldr	r3, [pc, #544]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a87      	ldr	r2, [pc, #540]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0xb0>
 8001ca4:	4b84      	ldr	r3, [pc, #528]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a83      	ldr	r2, [pc, #524]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b81      	ldr	r3, [pc, #516]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a80      	ldr	r2, [pc, #512]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d013      	beq.n	8001cec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fcc0 	bl	8001648 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fcbc 	bl	8001648 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e1fb      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	4b76      	ldr	r3, [pc, #472]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0xc0>
 8001cea:	e014      	b.n	8001d16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fcac 	bl	8001648 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fca8 	bl	8001648 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1e7      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	4b6c      	ldr	r3, [pc, #432]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0xe8>
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d063      	beq.n	8001dea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d22:	4b65      	ldr	r3, [pc, #404]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2e:	4b62      	ldr	r3, [pc, #392]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d11c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3a:	4b5f      	ldr	r3, [pc, #380]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d116      	bne.n	8001d74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	4b5c      	ldr	r3, [pc, #368]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_RCC_OscConfig+0x152>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e1bb      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5e:	4b56      	ldr	r3, [pc, #344]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4952      	ldr	r1, [pc, #328]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d72:	e03a      	b.n	8001dea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d020      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7c:	4b4f      	ldr	r3, [pc, #316]	; (8001ebc <HAL_RCC_OscConfig+0x2b0>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d82:	f7ff fc61 	bl	8001648 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d8a:	f7ff fc5d 	bl	8001648 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e19c      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9c:	4b46      	ldr	r3, [pc, #280]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4b43      	ldr	r3, [pc, #268]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4940      	ldr	r1, [pc, #256]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
 8001dbc:	e015      	b.n	8001dea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dbe:	4b3f      	ldr	r3, [pc, #252]	; (8001ebc <HAL_RCC_OscConfig+0x2b0>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fc40 	bl	8001648 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fc3c 	bl	8001648 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e17b      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dde:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d030      	beq.n	8001e58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d016      	beq.n	8001e2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfe:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <HAL_RCC_OscConfig+0x2b4>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7ff fc20 	bl	8001648 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fc1c 	bl	8001648 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e15b      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x200>
 8001e2a:	e015      	b.n	8001e58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_RCC_OscConfig+0x2b4>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e32:	f7ff fc09 	bl	8001648 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3a:	f7ff fc05 	bl	8001648 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e144      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f0      	bne.n	8001e3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80a0 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6a:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10f      	bne.n	8001e96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a0e      	ldr	r2, [pc, #56]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e92:	2301      	movs	r3, #1
 8001e94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x2b8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d121      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x2b8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x2b8>)
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eae:	f7ff fbcb 	bl	8001648 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb4:	e011      	b.n	8001eda <HAL_RCC_OscConfig+0x2ce>
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	42470000 	.word	0x42470000
 8001ec0:	42470e80 	.word	0x42470e80
 8001ec4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec8:	f7ff fbbe 	bl	8001648 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e0fd      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b81      	ldr	r3, [pc, #516]	; (80020e0 <HAL_RCC_OscConfig+0x4d4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d106      	bne.n	8001efc <HAL_RCC_OscConfig+0x2f0>
 8001eee:	4b7d      	ldr	r3, [pc, #500]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef2:	4a7c      	ldr	r2, [pc, #496]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8001efa:	e01c      	b.n	8001f36 <HAL_RCC_OscConfig+0x32a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b05      	cmp	r3, #5
 8001f02:	d10c      	bne.n	8001f1e <HAL_RCC_OscConfig+0x312>
 8001f04:	4b77      	ldr	r3, [pc, #476]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f08:	4a76      	ldr	r2, [pc, #472]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001f0a:	f043 0304 	orr.w	r3, r3, #4
 8001f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f10:	4b74      	ldr	r3, [pc, #464]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	4a73      	ldr	r2, [pc, #460]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1c:	e00b      	b.n	8001f36 <HAL_RCC_OscConfig+0x32a>
 8001f1e:	4b71      	ldr	r3, [pc, #452]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f22:	4a70      	ldr	r2, [pc, #448]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2a:	4b6e      	ldr	r3, [pc, #440]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	4a6d      	ldr	r2, [pc, #436]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d015      	beq.n	8001f6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fb83 	bl	8001648 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7ff fb7f 	bl	8001648 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0bc      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	4b61      	ldr	r3, [pc, #388]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ee      	beq.n	8001f46 <HAL_RCC_OscConfig+0x33a>
 8001f68:	e014      	b.n	8001f94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6a:	f7ff fb6d 	bl	8001648 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f70:	e00a      	b.n	8001f88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f72:	f7ff fb69 	bl	8001648 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e0a6      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f88:	4b56      	ldr	r3, [pc, #344]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1ee      	bne.n	8001f72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d105      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9a:	4b52      	ldr	r3, [pc, #328]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a51      	ldr	r2, [pc, #324]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8092 	beq.w	80020d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fb0:	4b4c      	ldr	r3, [pc, #304]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d05c      	beq.n	8002076 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d141      	bne.n	8002048 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc4:	4b48      	ldr	r3, [pc, #288]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7ff fb3d 	bl	8001648 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd2:	f7ff fb39 	bl	8001648 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e078      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe4:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f0      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	019b      	lsls	r3, r3, #6
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	3b01      	subs	r3, #1
 800200a:	041b      	lsls	r3, r3, #16
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	061b      	lsls	r3, r3, #24
 8002014:	4933      	ldr	r1, [pc, #204]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800201a:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 800201c:	2201      	movs	r2, #1
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff fb12 	bl	8001648 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002028:	f7ff fb0e 	bl	8001648 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e04d      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x41c>
 8002046:	e045      	b.n	80020d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002048:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <HAL_RCC_OscConfig+0x4dc>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204e:	f7ff fafb 	bl	8001648 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002056:	f7ff faf7 	bl	8001648 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e036      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f0      	bne.n	8002056 <HAL_RCC_OscConfig+0x44a>
 8002074:	e02e      	b.n	80020d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e029      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002082:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <HAL_RCC_OscConfig+0x4d8>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	429a      	cmp	r2, r3
 8002094:	d11c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d115      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020aa:	4013      	ands	r3, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d10d      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d106      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40007000 	.word	0x40007000
 80020e4:	40023800 	.word	0x40023800
 80020e8:	42470060 	.word	0x42470060

080020ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0cc      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b68      	ldr	r3, [pc, #416]	; (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d90c      	bls.n	8002128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b65      	ldr	r3, [pc, #404]	; (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b63      	ldr	r3, [pc, #396]	; (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0b8      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d020      	beq.n	8002176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002140:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4a58      	ldr	r2, [pc, #352]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800214a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002158:	4b53      	ldr	r3, [pc, #332]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4a52      	ldr	r2, [pc, #328]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b50      	ldr	r3, [pc, #320]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	494d      	ldr	r1, [pc, #308]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d044      	beq.n	800220c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b47      	ldr	r3, [pc, #284]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d119      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e07f      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d003      	beq.n	80021aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b3f      	ldr	r3, [pc, #252]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e06f      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e067      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4934      	ldr	r1, [pc, #208]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7ff fa34 	bl	8001648 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7ff fa30 	bl	8001648 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e04f      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b25      	ldr	r3, [pc, #148]	; (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d20c      	bcs.n	8002234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e032      	b.n	800229a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4916      	ldr	r1, [pc, #88]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	490e      	ldr	r1, [pc, #56]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002272:	f000 f821 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002276:	4601      	mov	r1, r0
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	5cd3      	ldrb	r3, [r2, r3]
 8002286:	fa21 f303 	lsr.w	r3, r1, r3
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f994 	bl	80015c0 <HAL_InitTick>

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023c00 	.word	0x40023c00
 80022a8:	40023800 	.word	0x40023800
 80022ac:	08005520 	.word	0x08005520
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000004 	.word	0x20000004

080022b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	2300      	movs	r3, #0
 80022c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ce:	4b50      	ldr	r3, [pc, #320]	; (8002410 <HAL_RCC_GetSysClockFreq+0x158>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d007      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x32>
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d008      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x38>
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 808d 	bne.w	80023fe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022e4:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <HAL_RCC_GetSysClockFreq+0x15c>)
 80022e6:	60bb      	str	r3, [r7, #8]
       break;
 80022e8:	e08c      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ea:	4b4b      	ldr	r3, [pc, #300]	; (8002418 <HAL_RCC_GetSysClockFreq+0x160>)
 80022ec:	60bb      	str	r3, [r7, #8]
      break;
 80022ee:	e089      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f0:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_GetSysClockFreq+0x158>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022fa:	4b45      	ldr	r3, [pc, #276]	; (8002410 <HAL_RCC_GetSysClockFreq+0x158>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d023      	beq.n	800234e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002306:	4b42      	ldr	r3, [pc, #264]	; (8002410 <HAL_RCC_GetSysClockFreq+0x158>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	099b      	lsrs	r3, r3, #6
 800230c:	f04f 0400 	mov.w	r4, #0
 8002310:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	ea03 0501 	and.w	r5, r3, r1
 800231c:	ea04 0602 	and.w	r6, r4, r2
 8002320:	4a3d      	ldr	r2, [pc, #244]	; (8002418 <HAL_RCC_GetSysClockFreq+0x160>)
 8002322:	fb02 f106 	mul.w	r1, r2, r6
 8002326:	2200      	movs	r2, #0
 8002328:	fb02 f205 	mul.w	r2, r2, r5
 800232c:	440a      	add	r2, r1
 800232e:	493a      	ldr	r1, [pc, #232]	; (8002418 <HAL_RCC_GetSysClockFreq+0x160>)
 8002330:	fba5 0101 	umull	r0, r1, r5, r1
 8002334:	1853      	adds	r3, r2, r1
 8002336:	4619      	mov	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f04f 0400 	mov.w	r4, #0
 800233e:	461a      	mov	r2, r3
 8002340:	4623      	mov	r3, r4
 8002342:	f7fe fbbb 	bl	8000abc <__aeabi_uldivmod>
 8002346:	4603      	mov	r3, r0
 8002348:	460c      	mov	r4, r1
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e049      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234e:	4b30      	ldr	r3, [pc, #192]	; (8002410 <HAL_RCC_GetSysClockFreq+0x158>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	099b      	lsrs	r3, r3, #6
 8002354:	f04f 0400 	mov.w	r4, #0
 8002358:	f240 11ff 	movw	r1, #511	; 0x1ff
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	ea03 0501 	and.w	r5, r3, r1
 8002364:	ea04 0602 	and.w	r6, r4, r2
 8002368:	4629      	mov	r1, r5
 800236a:	4632      	mov	r2, r6
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	f04f 0400 	mov.w	r4, #0
 8002374:	0154      	lsls	r4, r2, #5
 8002376:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800237a:	014b      	lsls	r3, r1, #5
 800237c:	4619      	mov	r1, r3
 800237e:	4622      	mov	r2, r4
 8002380:	1b49      	subs	r1, r1, r5
 8002382:	eb62 0206 	sbc.w	r2, r2, r6
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	f04f 0400 	mov.w	r4, #0
 800238e:	0194      	lsls	r4, r2, #6
 8002390:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002394:	018b      	lsls	r3, r1, #6
 8002396:	1a5b      	subs	r3, r3, r1
 8002398:	eb64 0402 	sbc.w	r4, r4, r2
 800239c:	f04f 0100 	mov.w	r1, #0
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	00e2      	lsls	r2, r4, #3
 80023a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023aa:	00d9      	lsls	r1, r3, #3
 80023ac:	460b      	mov	r3, r1
 80023ae:	4614      	mov	r4, r2
 80023b0:	195b      	adds	r3, r3, r5
 80023b2:	eb44 0406 	adc.w	r4, r4, r6
 80023b6:	f04f 0100 	mov.w	r1, #0
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	02a2      	lsls	r2, r4, #10
 80023c0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023c4:	0299      	lsls	r1, r3, #10
 80023c6:	460b      	mov	r3, r1
 80023c8:	4614      	mov	r4, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	4621      	mov	r1, r4
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f04f 0400 	mov.w	r4, #0
 80023d4:	461a      	mov	r2, r3
 80023d6:	4623      	mov	r3, r4
 80023d8:	f7fe fb70 	bl	8000abc <__aeabi_uldivmod>
 80023dc:	4603      	mov	r3, r0
 80023de:	460c      	mov	r4, r1
 80023e0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_GetSysClockFreq+0x158>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0c1b      	lsrs	r3, r3, #16
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	3301      	adds	r3, #1
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fa:	60bb      	str	r3, [r7, #8]
      break;
 80023fc:	e002      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002400:	60bb      	str	r3, [r7, #8]
      break;
 8002402:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002404:	68bb      	ldr	r3, [r7, #8]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	00f42400 	.word	0x00f42400
 8002418:	017d7840 	.word	0x017d7840

0800241c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_RCC_GetHCLKFreq+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000000 	.word	0x20000000

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002438:	f7ff fff0 	bl	800241c <HAL_RCC_GetHCLKFreq>
 800243c:	4601      	mov	r1, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0a9b      	lsrs	r3, r3, #10
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4a03      	ldr	r2, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40023800 	.word	0x40023800
 8002458:	08005530 	.word	0x08005530

0800245c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002460:	f7ff ffdc 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8002464:	4601      	mov	r1, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0b5b      	lsrs	r3, r3, #13
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4a03      	ldr	r2, [pc, #12]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	08005530 	.word	0x08005530

08002484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e056      	b.n	8002544 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe ff39 	bl	8001328 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	ea42 0103 	orr.w	r1, r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	0c1b      	lsrs	r3, r3, #16
 8002514:	f003 0104 	and.w	r1, r3, #4
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69da      	ldr	r2, [r3, #28]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002532:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af02      	add	r7, sp, #8
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002568:	d112      	bne.n	8002590 <HAL_SPI_Receive+0x44>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10e      	bne.n	8002590 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2204      	movs	r2, #4
 8002576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800257a:	88fa      	ldrh	r2, [r7, #6]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f8e9 	bl	800275e <HAL_SPI_TransmitReceive>
 800258c:	4603      	mov	r3, r0
 800258e:	e0e2      	b.n	8002756 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_SPI_Receive+0x52>
 800259a:	2302      	movs	r3, #2
 800259c:	e0db      	b.n	8002756 <HAL_SPI_Receive+0x20a>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025a6:	f7ff f84f 	bl	8001648 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d002      	beq.n	80025be <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
 80025ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025bc:	e0c2      	b.n	8002744 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <HAL_SPI_Receive+0x7e>
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d102      	bne.n	80025d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025ce:	e0b9      	b.n	8002744 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2204      	movs	r2, #4
 80025d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	88fa      	ldrh	r2, [r7, #6]
 80025e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	88fa      	ldrh	r2, [r7, #6]
 80025ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002616:	d107      	bne.n	8002628 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002626:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	2b40      	cmp	r3, #64	; 0x40
 8002634:	d007      	beq.n	8002646 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d162      	bne.n	8002714 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800264e:	e02e      	b.n	80026ae <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b01      	cmp	r3, #1
 800265c:	d115      	bne.n	800268a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f103 020c 	add.w	r2, r3, #12
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	7812      	ldrb	r2, [r2, #0]
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002688:	e011      	b.n	80026ae <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800268a:	f7fe ffdd 	bl	8001648 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d803      	bhi.n	80026a2 <HAL_SPI_Receive+0x156>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d102      	bne.n	80026a8 <HAL_SPI_Receive+0x15c>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80026ac:	e04a      	b.n	8002744 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1cb      	bne.n	8002650 <HAL_SPI_Receive+0x104>
 80026b8:	e031      	b.n	800271e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d113      	bne.n	80026f0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	b292      	uxth	r2, r2
 80026d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	1c9a      	adds	r2, r3, #2
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026ee:	e011      	b.n	8002714 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f0:	f7fe ffaa 	bl	8001648 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d803      	bhi.n	8002708 <HAL_SPI_Receive+0x1bc>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d102      	bne.n	800270e <HAL_SPI_Receive+0x1c2>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d102      	bne.n	8002714 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002712:	e017      	b.n	8002744 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1cd      	bne.n	80026ba <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	6839      	ldr	r1, [r7, #0]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fa27 	bl	8002b76 <SPI_EndRxTransaction>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	75fb      	strb	r3, [r7, #23]
 8002740:	e000      	b.n	8002744 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002742:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002754:	7dfb      	ldrb	r3, [r7, #23]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b08c      	sub	sp, #48	; 0x30
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800276c:	2301      	movs	r3, #1
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_SPI_TransmitReceive+0x26>
 8002780:	2302      	movs	r3, #2
 8002782:	e18a      	b.n	8002a9a <HAL_SPI_TransmitReceive+0x33c>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800278c:	f7fe ff5c 	bl	8001648 <HAL_GetTick>
 8002790:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d00f      	beq.n	80027ce <HAL_SPI_TransmitReceive+0x70>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027b4:	d107      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x68>
 80027be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d003      	beq.n	80027ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027c6:	2302      	movs	r3, #2
 80027c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027cc:	e15b      	b.n	8002a86 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_SPI_TransmitReceive+0x82>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_SPI_TransmitReceive+0x82>
 80027da:	887b      	ldrh	r3, [r7, #2]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d103      	bne.n	80027e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027e6:	e14e      	b.n	8002a86 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d003      	beq.n	80027fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2205      	movs	r2, #5
 80027f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	887a      	ldrh	r2, [r7, #2]
 8002812:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	887a      	ldrh	r2, [r7, #2]
 800281e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283c:	2b40      	cmp	r3, #64	; 0x40
 800283e:	d007      	beq.n	8002850 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800284e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002858:	d178      	bne.n	800294c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_SPI_TransmitReceive+0x10a>
 8002862:	8b7b      	ldrh	r3, [r7, #26]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d166      	bne.n	8002936 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	881a      	ldrh	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	1c9a      	adds	r2, r3, #2
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800288c:	e053      	b.n	8002936 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b02      	cmp	r3, #2
 800289a:	d11b      	bne.n	80028d4 <HAL_SPI_TransmitReceive+0x176>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d016      	beq.n	80028d4 <HAL_SPI_TransmitReceive+0x176>
 80028a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d113      	bne.n	80028d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	881a      	ldrh	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	1c9a      	adds	r2, r3, #2
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d119      	bne.n	8002916 <HAL_SPI_TransmitReceive+0x1b8>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d014      	beq.n	8002916 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	b292      	uxth	r2, r2
 80028f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	1c9a      	adds	r2, r3, #2
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002912:	2301      	movs	r3, #1
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002916:	f7fe fe97 	bl	8001648 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002922:	429a      	cmp	r2, r3
 8002924:	d807      	bhi.n	8002936 <HAL_SPI_TransmitReceive+0x1d8>
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d003      	beq.n	8002936 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002934:	e0a7      	b.n	8002a86 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1a6      	bne.n	800288e <HAL_SPI_TransmitReceive+0x130>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1a1      	bne.n	800288e <HAL_SPI_TransmitReceive+0x130>
 800294a:	e07c      	b.n	8002a46 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_SPI_TransmitReceive+0x1fc>
 8002954:	8b7b      	ldrh	r3, [r7, #26]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d16b      	bne.n	8002a32 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	330c      	adds	r3, #12
 8002964:	7812      	ldrb	r2, [r2, #0]
 8002966:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002980:	e057      	b.n	8002a32 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b02      	cmp	r3, #2
 800298e:	d11c      	bne.n	80029ca <HAL_SPI_TransmitReceive+0x26c>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d017      	beq.n	80029ca <HAL_SPI_TransmitReceive+0x26c>
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	2b01      	cmp	r3, #1
 800299e:	d114      	bne.n	80029ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	330c      	adds	r3, #12
 80029aa:	7812      	ldrb	r2, [r2, #0]
 80029ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d119      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x2ae>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d014      	beq.n	8002a0c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a0c:	f7fe fe1c 	bl	8001648 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d803      	bhi.n	8002a24 <HAL_SPI_TransmitReceive+0x2c6>
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a22:	d102      	bne.n	8002a2a <HAL_SPI_TransmitReceive+0x2cc>
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a30:	e029      	b.n	8002a86 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1a2      	bne.n	8002982 <HAL_SPI_TransmitReceive+0x224>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d19d      	bne.n	8002982 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f8f8 	bl	8002c40 <SPI_EndRxTxTransaction>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a62:	e010      	b.n	8002a86 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	e000      	b.n	8002a86 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3730      	adds	r7, #48	; 0x30
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	603b      	str	r3, [r7, #0]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ab2:	e04c      	b.n	8002b4e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d048      	beq.n	8002b4e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002abc:	f7fe fdc4 	bl	8001648 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d902      	bls.n	8002ad2 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d13d      	bne.n	8002b4e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aea:	d111      	bne.n	8002b10 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af4:	d004      	beq.n	8002b00 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afe:	d107      	bne.n	8002b10 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b18:	d10f      	bne.n	8002b3a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e00f      	b.n	8002b6e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4013      	ands	r3, r2
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	bf0c      	ite	eq
 8002b5e:	2301      	moveq	r3, #1
 8002b60:	2300      	movne	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1a3      	bne.n	8002ab4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af02      	add	r7, sp, #8
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8a:	d111      	bne.n	8002bb0 <SPI_EndRxTransaction+0x3a>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b94:	d004      	beq.n	8002ba0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9e:	d107      	bne.n	8002bb0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bae:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bb8:	d12a      	bne.n	8002c10 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc2:	d012      	beq.n	8002bea <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f7ff ff67 	bl	8002aa2 <SPI_WaitFlagStateUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d02d      	beq.n	8002c36 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f043 0220 	orr.w	r2, r3, #32
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e026      	b.n	8002c38 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f7ff ff54 	bl	8002aa2 <SPI_WaitFlagStateUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d01a      	beq.n	8002c36 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e013      	b.n	8002c38 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2200      	movs	r2, #0
 8002c18:	2101      	movs	r1, #1
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff ff41 	bl	8002aa2 <SPI_WaitFlagStateUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	f043 0220 	orr.w	r2, r3, #32
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e000      	b.n	8002c38 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <SPI_EndRxTxTransaction+0x7c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <SPI_EndRxTxTransaction+0x80>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	0d5b      	lsrs	r3, r3, #21
 8002c58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c5c:	fb02 f303 	mul.w	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c6a:	d112      	bne.n	8002c92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2200      	movs	r2, #0
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f7ff ff13 	bl	8002aa2 <SPI_WaitFlagStateUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d016      	beq.n	8002cb0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	f043 0220 	orr.w	r2, r3, #32
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e00f      	b.n	8002cb2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d0f2      	beq.n	8002c92 <SPI_EndRxTxTransaction+0x52>
 8002cac:	e000      	b.n	8002cb0 <SPI_EndRxTxTransaction+0x70>
        break;
 8002cae:	bf00      	nop
  }

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	165e9f81 	.word	0x165e9f81

08002cc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e03f      	b.n	8002d56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fe fb64 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2224      	movs	r2, #36	; 0x24
 8002cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f90b 	bl	8002f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b088      	sub	sp, #32
 8002d62:	af02      	add	r7, sp, #8
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	f040 8083 	bne.w	8002e86 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_UART_Transmit+0x2e>
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e07b      	b.n	8002e88 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_UART_Transmit+0x40>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e074      	b.n	8002e88 <HAL_UART_Transmit+0x12a>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2221      	movs	r2, #33	; 0x21
 8002db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002db4:	f7fe fc48 	bl	8001648 <HAL_GetTick>
 8002db8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	88fa      	ldrh	r2, [r7, #6]
 8002dbe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002dce:	e042      	b.n	8002e56 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de6:	d122      	bne.n	8002e2e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2200      	movs	r2, #0
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f84c 	bl	8002e90 <UART_WaitOnFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e042      	b.n	8002e88 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e14:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	3302      	adds	r3, #2
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	e017      	b.n	8002e56 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	e013      	b.n	8002e56 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2200      	movs	r2, #0
 8002e36:	2180      	movs	r1, #128	; 0x80
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f829 	bl	8002e90 <UART_WaitOnFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e01f      	b.n	8002e88 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	60ba      	str	r2, [r7, #8]
 8002e4e:	781a      	ldrb	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1b7      	bne.n	8002dd0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2200      	movs	r2, #0
 8002e68:	2140      	movs	r1, #64	; 0x40
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f810 	bl	8002e90 <UART_WaitOnFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e006      	b.n	8002e88 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
  }
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea0:	e02c      	b.n	8002efc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d028      	beq.n	8002efc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eb0:	f7fe fbca 	bl	8001648 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d21d      	bcs.n	8002efc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ece:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e00f      	b.n	8002f1c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4013      	ands	r3, r2
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d0c3      	beq.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f66:	f023 030c 	bic.w	r3, r3, #12
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	68f9      	ldr	r1, [r7, #12]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f92:	f040 818b 	bne.w	80032ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4ac1      	ldr	r2, [pc, #772]	; (80032a0 <UART_SetConfig+0x37c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d005      	beq.n	8002fac <UART_SetConfig+0x88>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4abf      	ldr	r2, [pc, #764]	; (80032a4 <UART_SetConfig+0x380>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	f040 80bd 	bne.w	8003126 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fac:	f7ff fa56 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8002fb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	461d      	mov	r5, r3
 8002fb6:	f04f 0600 	mov.w	r6, #0
 8002fba:	46a8      	mov	r8, r5
 8002fbc:	46b1      	mov	r9, r6
 8002fbe:	eb18 0308 	adds.w	r3, r8, r8
 8002fc2:	eb49 0409 	adc.w	r4, r9, r9
 8002fc6:	4698      	mov	r8, r3
 8002fc8:	46a1      	mov	r9, r4
 8002fca:	eb18 0805 	adds.w	r8, r8, r5
 8002fce:	eb49 0906 	adc.w	r9, r9, r6
 8002fd2:	f04f 0100 	mov.w	r1, #0
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fde:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fe2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fe6:	4688      	mov	r8, r1
 8002fe8:	4691      	mov	r9, r2
 8002fea:	eb18 0005 	adds.w	r0, r8, r5
 8002fee:	eb49 0106 	adc.w	r1, r9, r6
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	461d      	mov	r5, r3
 8002ff8:	f04f 0600 	mov.w	r6, #0
 8002ffc:	196b      	adds	r3, r5, r5
 8002ffe:	eb46 0406 	adc.w	r4, r6, r6
 8003002:	461a      	mov	r2, r3
 8003004:	4623      	mov	r3, r4
 8003006:	f7fd fd59 	bl	8000abc <__aeabi_uldivmod>
 800300a:	4603      	mov	r3, r0
 800300c:	460c      	mov	r4, r1
 800300e:	461a      	mov	r2, r3
 8003010:	4ba5      	ldr	r3, [pc, #660]	; (80032a8 <UART_SetConfig+0x384>)
 8003012:	fba3 2302 	umull	r2, r3, r3, r2
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	461d      	mov	r5, r3
 8003020:	f04f 0600 	mov.w	r6, #0
 8003024:	46a9      	mov	r9, r5
 8003026:	46b2      	mov	sl, r6
 8003028:	eb19 0309 	adds.w	r3, r9, r9
 800302c:	eb4a 040a 	adc.w	r4, sl, sl
 8003030:	4699      	mov	r9, r3
 8003032:	46a2      	mov	sl, r4
 8003034:	eb19 0905 	adds.w	r9, r9, r5
 8003038:	eb4a 0a06 	adc.w	sl, sl, r6
 800303c:	f04f 0100 	mov.w	r1, #0
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003048:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800304c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003050:	4689      	mov	r9, r1
 8003052:	4692      	mov	sl, r2
 8003054:	eb19 0005 	adds.w	r0, r9, r5
 8003058:	eb4a 0106 	adc.w	r1, sl, r6
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	461d      	mov	r5, r3
 8003062:	f04f 0600 	mov.w	r6, #0
 8003066:	196b      	adds	r3, r5, r5
 8003068:	eb46 0406 	adc.w	r4, r6, r6
 800306c:	461a      	mov	r2, r3
 800306e:	4623      	mov	r3, r4
 8003070:	f7fd fd24 	bl	8000abc <__aeabi_uldivmod>
 8003074:	4603      	mov	r3, r0
 8003076:	460c      	mov	r4, r1
 8003078:	461a      	mov	r2, r3
 800307a:	4b8b      	ldr	r3, [pc, #556]	; (80032a8 <UART_SetConfig+0x384>)
 800307c:	fba3 1302 	umull	r1, r3, r3, r2
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	2164      	movs	r1, #100	; 0x64
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	3332      	adds	r3, #50	; 0x32
 800308e:	4a86      	ldr	r2, [pc, #536]	; (80032a8 <UART_SetConfig+0x384>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800309c:	4498      	add	r8, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	461d      	mov	r5, r3
 80030a2:	f04f 0600 	mov.w	r6, #0
 80030a6:	46a9      	mov	r9, r5
 80030a8:	46b2      	mov	sl, r6
 80030aa:	eb19 0309 	adds.w	r3, r9, r9
 80030ae:	eb4a 040a 	adc.w	r4, sl, sl
 80030b2:	4699      	mov	r9, r3
 80030b4:	46a2      	mov	sl, r4
 80030b6:	eb19 0905 	adds.w	r9, r9, r5
 80030ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80030be:	f04f 0100 	mov.w	r1, #0
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030d2:	4689      	mov	r9, r1
 80030d4:	4692      	mov	sl, r2
 80030d6:	eb19 0005 	adds.w	r0, r9, r5
 80030da:	eb4a 0106 	adc.w	r1, sl, r6
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	461d      	mov	r5, r3
 80030e4:	f04f 0600 	mov.w	r6, #0
 80030e8:	196b      	adds	r3, r5, r5
 80030ea:	eb46 0406 	adc.w	r4, r6, r6
 80030ee:	461a      	mov	r2, r3
 80030f0:	4623      	mov	r3, r4
 80030f2:	f7fd fce3 	bl	8000abc <__aeabi_uldivmod>
 80030f6:	4603      	mov	r3, r0
 80030f8:	460c      	mov	r4, r1
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b6a      	ldr	r3, [pc, #424]	; (80032a8 <UART_SetConfig+0x384>)
 80030fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	2164      	movs	r1, #100	; 0x64
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	3332      	adds	r3, #50	; 0x32
 8003110:	4a65      	ldr	r2, [pc, #404]	; (80032a8 <UART_SetConfig+0x384>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	f003 0207 	and.w	r2, r3, #7
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4442      	add	r2, r8
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	e26f      	b.n	8003606 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003126:	f7ff f985 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 800312a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	461d      	mov	r5, r3
 8003130:	f04f 0600 	mov.w	r6, #0
 8003134:	46a8      	mov	r8, r5
 8003136:	46b1      	mov	r9, r6
 8003138:	eb18 0308 	adds.w	r3, r8, r8
 800313c:	eb49 0409 	adc.w	r4, r9, r9
 8003140:	4698      	mov	r8, r3
 8003142:	46a1      	mov	r9, r4
 8003144:	eb18 0805 	adds.w	r8, r8, r5
 8003148:	eb49 0906 	adc.w	r9, r9, r6
 800314c:	f04f 0100 	mov.w	r1, #0
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003158:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800315c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003160:	4688      	mov	r8, r1
 8003162:	4691      	mov	r9, r2
 8003164:	eb18 0005 	adds.w	r0, r8, r5
 8003168:	eb49 0106 	adc.w	r1, r9, r6
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	461d      	mov	r5, r3
 8003172:	f04f 0600 	mov.w	r6, #0
 8003176:	196b      	adds	r3, r5, r5
 8003178:	eb46 0406 	adc.w	r4, r6, r6
 800317c:	461a      	mov	r2, r3
 800317e:	4623      	mov	r3, r4
 8003180:	f7fd fc9c 	bl	8000abc <__aeabi_uldivmod>
 8003184:	4603      	mov	r3, r0
 8003186:	460c      	mov	r4, r1
 8003188:	461a      	mov	r2, r3
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <UART_SetConfig+0x384>)
 800318c:	fba3 2302 	umull	r2, r3, r3, r2
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	461d      	mov	r5, r3
 800319a:	f04f 0600 	mov.w	r6, #0
 800319e:	46a9      	mov	r9, r5
 80031a0:	46b2      	mov	sl, r6
 80031a2:	eb19 0309 	adds.w	r3, r9, r9
 80031a6:	eb4a 040a 	adc.w	r4, sl, sl
 80031aa:	4699      	mov	r9, r3
 80031ac:	46a2      	mov	sl, r4
 80031ae:	eb19 0905 	adds.w	r9, r9, r5
 80031b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80031b6:	f04f 0100 	mov.w	r1, #0
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031ca:	4689      	mov	r9, r1
 80031cc:	4692      	mov	sl, r2
 80031ce:	eb19 0005 	adds.w	r0, r9, r5
 80031d2:	eb4a 0106 	adc.w	r1, sl, r6
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	461d      	mov	r5, r3
 80031dc:	f04f 0600 	mov.w	r6, #0
 80031e0:	196b      	adds	r3, r5, r5
 80031e2:	eb46 0406 	adc.w	r4, r6, r6
 80031e6:	461a      	mov	r2, r3
 80031e8:	4623      	mov	r3, r4
 80031ea:	f7fd fc67 	bl	8000abc <__aeabi_uldivmod>
 80031ee:	4603      	mov	r3, r0
 80031f0:	460c      	mov	r4, r1
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <UART_SetConfig+0x384>)
 80031f6:	fba3 1302 	umull	r1, r3, r3, r2
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2164      	movs	r1, #100	; 0x64
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	3332      	adds	r3, #50	; 0x32
 8003208:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <UART_SetConfig+0x384>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003216:	4498      	add	r8, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	461d      	mov	r5, r3
 800321c:	f04f 0600 	mov.w	r6, #0
 8003220:	46a9      	mov	r9, r5
 8003222:	46b2      	mov	sl, r6
 8003224:	eb19 0309 	adds.w	r3, r9, r9
 8003228:	eb4a 040a 	adc.w	r4, sl, sl
 800322c:	4699      	mov	r9, r3
 800322e:	46a2      	mov	sl, r4
 8003230:	eb19 0905 	adds.w	r9, r9, r5
 8003234:	eb4a 0a06 	adc.w	sl, sl, r6
 8003238:	f04f 0100 	mov.w	r1, #0
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003244:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003248:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800324c:	4689      	mov	r9, r1
 800324e:	4692      	mov	sl, r2
 8003250:	eb19 0005 	adds.w	r0, r9, r5
 8003254:	eb4a 0106 	adc.w	r1, sl, r6
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	461d      	mov	r5, r3
 800325e:	f04f 0600 	mov.w	r6, #0
 8003262:	196b      	adds	r3, r5, r5
 8003264:	eb46 0406 	adc.w	r4, r6, r6
 8003268:	461a      	mov	r2, r3
 800326a:	4623      	mov	r3, r4
 800326c:	f7fd fc26 	bl	8000abc <__aeabi_uldivmod>
 8003270:	4603      	mov	r3, r0
 8003272:	460c      	mov	r4, r1
 8003274:	461a      	mov	r2, r3
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <UART_SetConfig+0x384>)
 8003278:	fba3 1302 	umull	r1, r3, r3, r2
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	2164      	movs	r1, #100	; 0x64
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	3332      	adds	r3, #50	; 0x32
 800328a:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <UART_SetConfig+0x384>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	f003 0207 	and.w	r2, r3, #7
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4442      	add	r2, r8
 800329c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800329e:	e1b2      	b.n	8003606 <UART_SetConfig+0x6e2>
 80032a0:	40011000 	.word	0x40011000
 80032a4:	40011400 	.word	0x40011400
 80032a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4ad7      	ldr	r2, [pc, #860]	; (8003610 <UART_SetConfig+0x6ec>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d005      	beq.n	80032c2 <UART_SetConfig+0x39e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4ad6      	ldr	r2, [pc, #856]	; (8003614 <UART_SetConfig+0x6f0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	f040 80d1 	bne.w	8003464 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80032c2:	f7ff f8cb 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 80032c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	469a      	mov	sl, r3
 80032cc:	f04f 0b00 	mov.w	fp, #0
 80032d0:	46d0      	mov	r8, sl
 80032d2:	46d9      	mov	r9, fp
 80032d4:	eb18 0308 	adds.w	r3, r8, r8
 80032d8:	eb49 0409 	adc.w	r4, r9, r9
 80032dc:	4698      	mov	r8, r3
 80032de:	46a1      	mov	r9, r4
 80032e0:	eb18 080a 	adds.w	r8, r8, sl
 80032e4:	eb49 090b 	adc.w	r9, r9, fp
 80032e8:	f04f 0100 	mov.w	r1, #0
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032fc:	4688      	mov	r8, r1
 80032fe:	4691      	mov	r9, r2
 8003300:	eb1a 0508 	adds.w	r5, sl, r8
 8003304:	eb4b 0609 	adc.w	r6, fp, r9
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4619      	mov	r1, r3
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	f04f 0400 	mov.w	r4, #0
 800331a:	0094      	lsls	r4, r2, #2
 800331c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003320:	008b      	lsls	r3, r1, #2
 8003322:	461a      	mov	r2, r3
 8003324:	4623      	mov	r3, r4
 8003326:	4628      	mov	r0, r5
 8003328:	4631      	mov	r1, r6
 800332a:	f7fd fbc7 	bl	8000abc <__aeabi_uldivmod>
 800332e:	4603      	mov	r3, r0
 8003330:	460c      	mov	r4, r1
 8003332:	461a      	mov	r2, r3
 8003334:	4bb8      	ldr	r3, [pc, #736]	; (8003618 <UART_SetConfig+0x6f4>)
 8003336:	fba3 2302 	umull	r2, r3, r3, r2
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	469b      	mov	fp, r3
 8003344:	f04f 0c00 	mov.w	ip, #0
 8003348:	46d9      	mov	r9, fp
 800334a:	46e2      	mov	sl, ip
 800334c:	eb19 0309 	adds.w	r3, r9, r9
 8003350:	eb4a 040a 	adc.w	r4, sl, sl
 8003354:	4699      	mov	r9, r3
 8003356:	46a2      	mov	sl, r4
 8003358:	eb19 090b 	adds.w	r9, r9, fp
 800335c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003360:	f04f 0100 	mov.w	r1, #0
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800336c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003370:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003374:	4689      	mov	r9, r1
 8003376:	4692      	mov	sl, r2
 8003378:	eb1b 0509 	adds.w	r5, fp, r9
 800337c:	eb4c 060a 	adc.w	r6, ip, sl
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4619      	mov	r1, r3
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	f04f 0400 	mov.w	r4, #0
 8003392:	0094      	lsls	r4, r2, #2
 8003394:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003398:	008b      	lsls	r3, r1, #2
 800339a:	461a      	mov	r2, r3
 800339c:	4623      	mov	r3, r4
 800339e:	4628      	mov	r0, r5
 80033a0:	4631      	mov	r1, r6
 80033a2:	f7fd fb8b 	bl	8000abc <__aeabi_uldivmod>
 80033a6:	4603      	mov	r3, r0
 80033a8:	460c      	mov	r4, r1
 80033aa:	461a      	mov	r2, r3
 80033ac:	4b9a      	ldr	r3, [pc, #616]	; (8003618 <UART_SetConfig+0x6f4>)
 80033ae:	fba3 1302 	umull	r1, r3, r3, r2
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2164      	movs	r1, #100	; 0x64
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	3332      	adds	r3, #50	; 0x32
 80033c0:	4a95      	ldr	r2, [pc, #596]	; (8003618 <UART_SetConfig+0x6f4>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033cc:	4498      	add	r8, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	469b      	mov	fp, r3
 80033d2:	f04f 0c00 	mov.w	ip, #0
 80033d6:	46d9      	mov	r9, fp
 80033d8:	46e2      	mov	sl, ip
 80033da:	eb19 0309 	adds.w	r3, r9, r9
 80033de:	eb4a 040a 	adc.w	r4, sl, sl
 80033e2:	4699      	mov	r9, r3
 80033e4:	46a2      	mov	sl, r4
 80033e6:	eb19 090b 	adds.w	r9, r9, fp
 80033ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033ee:	f04f 0100 	mov.w	r1, #0
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003402:	4689      	mov	r9, r1
 8003404:	4692      	mov	sl, r2
 8003406:	eb1b 0509 	adds.w	r5, fp, r9
 800340a:	eb4c 060a 	adc.w	r6, ip, sl
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4619      	mov	r1, r3
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	f04f 0400 	mov.w	r4, #0
 8003420:	0094      	lsls	r4, r2, #2
 8003422:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003426:	008b      	lsls	r3, r1, #2
 8003428:	461a      	mov	r2, r3
 800342a:	4623      	mov	r3, r4
 800342c:	4628      	mov	r0, r5
 800342e:	4631      	mov	r1, r6
 8003430:	f7fd fb44 	bl	8000abc <__aeabi_uldivmod>
 8003434:	4603      	mov	r3, r0
 8003436:	460c      	mov	r4, r1
 8003438:	461a      	mov	r2, r3
 800343a:	4b77      	ldr	r3, [pc, #476]	; (8003618 <UART_SetConfig+0x6f4>)
 800343c:	fba3 1302 	umull	r1, r3, r3, r2
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	2164      	movs	r1, #100	; 0x64
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	3332      	adds	r3, #50	; 0x32
 800344e:	4a72      	ldr	r2, [pc, #456]	; (8003618 <UART_SetConfig+0x6f4>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	f003 020f 	and.w	r2, r3, #15
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4442      	add	r2, r8
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	e0d0      	b.n	8003606 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003464:	f7fe ffe6 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8003468:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	469a      	mov	sl, r3
 800346e:	f04f 0b00 	mov.w	fp, #0
 8003472:	46d0      	mov	r8, sl
 8003474:	46d9      	mov	r9, fp
 8003476:	eb18 0308 	adds.w	r3, r8, r8
 800347a:	eb49 0409 	adc.w	r4, r9, r9
 800347e:	4698      	mov	r8, r3
 8003480:	46a1      	mov	r9, r4
 8003482:	eb18 080a 	adds.w	r8, r8, sl
 8003486:	eb49 090b 	adc.w	r9, r9, fp
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003496:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800349a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800349e:	4688      	mov	r8, r1
 80034a0:	4691      	mov	r9, r2
 80034a2:	eb1a 0508 	adds.w	r5, sl, r8
 80034a6:	eb4b 0609 	adc.w	r6, fp, r9
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4619      	mov	r1, r3
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	f04f 0400 	mov.w	r4, #0
 80034bc:	0094      	lsls	r4, r2, #2
 80034be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034c2:	008b      	lsls	r3, r1, #2
 80034c4:	461a      	mov	r2, r3
 80034c6:	4623      	mov	r3, r4
 80034c8:	4628      	mov	r0, r5
 80034ca:	4631      	mov	r1, r6
 80034cc:	f7fd faf6 	bl	8000abc <__aeabi_uldivmod>
 80034d0:	4603      	mov	r3, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	461a      	mov	r2, r3
 80034d6:	4b50      	ldr	r3, [pc, #320]	; (8003618 <UART_SetConfig+0x6f4>)
 80034d8:	fba3 2302 	umull	r2, r3, r3, r2
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	469b      	mov	fp, r3
 80034e6:	f04f 0c00 	mov.w	ip, #0
 80034ea:	46d9      	mov	r9, fp
 80034ec:	46e2      	mov	sl, ip
 80034ee:	eb19 0309 	adds.w	r3, r9, r9
 80034f2:	eb4a 040a 	adc.w	r4, sl, sl
 80034f6:	4699      	mov	r9, r3
 80034f8:	46a2      	mov	sl, r4
 80034fa:	eb19 090b 	adds.w	r9, r9, fp
 80034fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003502:	f04f 0100 	mov.w	r1, #0
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800350e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003512:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003516:	4689      	mov	r9, r1
 8003518:	4692      	mov	sl, r2
 800351a:	eb1b 0509 	adds.w	r5, fp, r9
 800351e:	eb4c 060a 	adc.w	r6, ip, sl
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4619      	mov	r1, r3
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	f04f 0400 	mov.w	r4, #0
 8003534:	0094      	lsls	r4, r2, #2
 8003536:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800353a:	008b      	lsls	r3, r1, #2
 800353c:	461a      	mov	r2, r3
 800353e:	4623      	mov	r3, r4
 8003540:	4628      	mov	r0, r5
 8003542:	4631      	mov	r1, r6
 8003544:	f7fd faba 	bl	8000abc <__aeabi_uldivmod>
 8003548:	4603      	mov	r3, r0
 800354a:	460c      	mov	r4, r1
 800354c:	461a      	mov	r2, r3
 800354e:	4b32      	ldr	r3, [pc, #200]	; (8003618 <UART_SetConfig+0x6f4>)
 8003550:	fba3 1302 	umull	r1, r3, r3, r2
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	2164      	movs	r1, #100	; 0x64
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	3332      	adds	r3, #50	; 0x32
 8003562:	4a2d      	ldr	r2, [pc, #180]	; (8003618 <UART_SetConfig+0x6f4>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800356e:	4498      	add	r8, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	469b      	mov	fp, r3
 8003574:	f04f 0c00 	mov.w	ip, #0
 8003578:	46d9      	mov	r9, fp
 800357a:	46e2      	mov	sl, ip
 800357c:	eb19 0309 	adds.w	r3, r9, r9
 8003580:	eb4a 040a 	adc.w	r4, sl, sl
 8003584:	4699      	mov	r9, r3
 8003586:	46a2      	mov	sl, r4
 8003588:	eb19 090b 	adds.w	r9, r9, fp
 800358c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003590:	f04f 0100 	mov.w	r1, #0
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800359c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035a4:	4689      	mov	r9, r1
 80035a6:	4692      	mov	sl, r2
 80035a8:	eb1b 0509 	adds.w	r5, fp, r9
 80035ac:	eb4c 060a 	adc.w	r6, ip, sl
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4619      	mov	r1, r3
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	f04f 0400 	mov.w	r4, #0
 80035c2:	0094      	lsls	r4, r2, #2
 80035c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035c8:	008b      	lsls	r3, r1, #2
 80035ca:	461a      	mov	r2, r3
 80035cc:	4623      	mov	r3, r4
 80035ce:	4628      	mov	r0, r5
 80035d0:	4631      	mov	r1, r6
 80035d2:	f7fd fa73 	bl	8000abc <__aeabi_uldivmod>
 80035d6:	4603      	mov	r3, r0
 80035d8:	460c      	mov	r4, r1
 80035da:	461a      	mov	r2, r3
 80035dc:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <UART_SetConfig+0x6f4>)
 80035de:	fba3 1302 	umull	r1, r3, r3, r2
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2164      	movs	r1, #100	; 0x64
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	3332      	adds	r3, #50	; 0x32
 80035f0:	4a09      	ldr	r2, [pc, #36]	; (8003618 <UART_SetConfig+0x6f4>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	f003 020f 	and.w	r2, r3, #15
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4442      	add	r2, r8
 8003602:	609a      	str	r2, [r3, #8]
}
 8003604:	e7ff      	b.n	8003606 <UART_SetConfig+0x6e2>
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003610:	40011000 	.word	0x40011000
 8003614:	40011400 	.word	0x40011400
 8003618:	51eb851f 	.word	0x51eb851f

0800361c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800362a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800362e:	2b84      	cmp	r3, #132	; 0x84
 8003630:	d005      	beq.n	800363e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003632:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	3303      	adds	r3, #3
 800363c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800363e:	68fb      	ldr	r3, [r7, #12]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <makeCmsisPriority>:

#if (INCLUDE_uxTaskPriorityGet == 1)
/* Convert from FreeRTOS priority number to CMSIS type osPriority */
static osPriority makeCmsisPriority (unsigned portBASE_TYPE fpriority)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  osPriority priority = osPriorityError;
 8003654:	2384      	movs	r3, #132	; 0x84
 8003656:	81fb      	strh	r3, [r7, #14]
  
  if ((fpriority - tskIDLE_PRIORITY) <= (osPriorityRealtime - osPriorityIdle)) {
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b06      	cmp	r3, #6
 800365c:	d804      	bhi.n	8003668 <makeCmsisPriority+0x1c>
    priority = (osPriority)((int)osPriorityIdle + (int)(fpriority - tskIDLE_PRIORITY));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b03      	subs	r3, #3
 8003664:	b29b      	uxth	r3, r3
 8003666:	81fb      	strh	r3, [r7, #14]
  }
  
  return priority;
 8003668:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800367e:	f3ef 8305 	mrs	r3, IPSR
 8003682:	607b      	str	r3, [r7, #4]
  return(result);
 8003684:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80036a0:	f000 fb7a 	bl	8003d98 <vTaskStartScheduler>
  
  return osOK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	bd80      	pop	{r7, pc}

080036aa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80036aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ac:	b089      	sub	sp, #36	; 0x24
 80036ae:	af04      	add	r7, sp, #16
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d020      	beq.n	80036fe <osThreadCreate+0x54>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01c      	beq.n	80036fe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685c      	ldr	r4, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681d      	ldr	r5, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691e      	ldr	r6, [r3, #16]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff ffa0 	bl	800361c <makeFreeRtosPriority>
 80036dc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036e6:	9202      	str	r2, [sp, #8]
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	9100      	str	r1, [sp, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	4632      	mov	r2, r6
 80036f0:	4629      	mov	r1, r5
 80036f2:	4620      	mov	r0, r4
 80036f4:	f000 f8d3 	bl	800389e <xTaskCreateStatic>
 80036f8:	4603      	mov	r3, r0
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e01c      	b.n	8003738 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685c      	ldr	r4, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800370a:	b29e      	uxth	r6, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff ff82 	bl	800361c <makeFreeRtosPriority>
 8003718:	4602      	mov	r2, r0
 800371a:	f107 030c 	add.w	r3, r7, #12
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	9200      	str	r2, [sp, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	4632      	mov	r2, r6
 8003726:	4629      	mov	r1, r5
 8003728:	4620      	mov	r0, r4
 800372a:	f000 f912 	bl	8003952 <xTaskCreate>
 800372e:	4603      	mov	r3, r0
 8003730:	2b01      	cmp	r3, #1
 8003732:	d001      	beq.n	8003738 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003734:	2300      	movs	r3, #0
 8003736:	e000      	b.n	800373a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003738:	68fb      	ldr	r3, [r7, #12]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003742 <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	807b      	strh	r3, [r7, #2]
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 800374e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff ff62 	bl	800361c <makeFreeRtosPriority>
 8003758:	4603      	mov	r3, r0
 800375a:	4619      	mov	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fa73 	bl	8003c48 <vTaskPrioritySet>
  return osOK;
 8003762:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <osThreadGetPriority>:
* @param   thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  current priority value of the thread function.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetPriority shall be consistent in every CMSIS-RTOS.
*/
osPriority osThreadGetPriority (osThreadId thread_id)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
#if (INCLUDE_uxTaskPriorityGet == 1)
  if (inHandlerMode())
 8003774:	f7ff ff80 	bl	8003678 <inHandlerMode>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d008      	beq.n	8003790 <osThreadGetPriority+0x24>
  {
    return makeCmsisPriority(uxTaskPriorityGetFromISR(thread_id));  
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fa36 	bl	8003bf0 <uxTaskPriorityGetFromISR>
 8003784:	4603      	mov	r3, r0
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff ff60 	bl	800364c <makeCmsisPriority>
 800378c:	4603      	mov	r3, r0
 800378e:	e007      	b.n	80037a0 <osThreadGetPriority+0x34>
  }
  else
  {  
    return makeCmsisPriority(uxTaskPriorityGet(thread_id));
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fa13 	bl	8003bbc <uxTaskPriorityGet>
 8003796:	4603      	mov	r3, r0
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ff57 	bl	800364c <makeCmsisPriority>
 800379e:	4603      	mov	r3, r0
  }
#else
  return osPriorityError;
#endif
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f103 0208 	add.w	r2, r3, #8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295
 80037c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f103 0208 	add.w	r2, r3, #8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f103 0208 	add.w	r2, r3, #8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	601a      	str	r2, [r3, #0]
}
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800384a:	b480      	push	{r7}
 800384c:	b085      	sub	sp, #20
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6892      	ldr	r2, [r2, #8]
 8003860:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6852      	ldr	r2, [r2, #4]
 800386a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	429a      	cmp	r2, r3
 8003874:	d103      	bne.n	800387e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1e5a      	subs	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b08e      	sub	sp, #56	; 0x38
 80038a2:	af04      	add	r7, sp, #16
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	623b      	str	r3, [r7, #32]
 80038c4:	e7fe      	b.n	80038c4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <xTaskCreateStatic+0x42>
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	61fb      	str	r3, [r7, #28]
 80038de:	e7fe      	b.n	80038de <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038e0:	2354      	movs	r3, #84	; 0x54
 80038e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b54      	cmp	r3, #84	; 0x54
 80038e8:	d009      	beq.n	80038fe <xTaskCreateStatic+0x60>
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	e7fe      	b.n	80038fc <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01e      	beq.n	8003944 <xTaskCreateStatic+0xa6>
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01b      	beq.n	8003944 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800390c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003914:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	2202      	movs	r2, #2
 800391a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800391e:	2300      	movs	r3, #0
 8003920:	9303      	str	r3, [sp, #12]
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	9302      	str	r3, [sp, #8]
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f850 	bl	80039dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800393c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800393e:	f000 f8d3 	bl	8003ae8 <prvAddNewTaskToReadyList>
 8003942:	e001      	b.n	8003948 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003948:	697b      	ldr	r3, [r7, #20]
	}
 800394a:	4618      	mov	r0, r3
 800394c:	3728      	adds	r7, #40	; 0x28
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003952:	b580      	push	{r7, lr}
 8003954:	b08c      	sub	sp, #48	; 0x30
 8003956:	af04      	add	r7, sp, #16
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	603b      	str	r3, [r7, #0]
 800395e:	4613      	mov	r3, r2
 8003960:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4618      	mov	r0, r3
 8003968:	f000 ff62 	bl	8004830 <pvPortMalloc>
 800396c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00e      	beq.n	8003992 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003974:	2054      	movs	r0, #84	; 0x54
 8003976:	f000 ff5b 	bl	8004830 <pvPortMalloc>
 800397a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
 8003988:	e005      	b.n	8003996 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800398a:	6978      	ldr	r0, [r7, #20]
 800398c:	f001 f812 	bl	80049b4 <vPortFree>
 8003990:	e001      	b.n	8003996 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d017      	beq.n	80039cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039a4:	88fa      	ldrh	r2, [r7, #6]
 80039a6:	2300      	movs	r3, #0
 80039a8:	9303      	str	r3, [sp, #12]
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	9302      	str	r3, [sp, #8]
 80039ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f80e 	bl	80039dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039c0:	69f8      	ldr	r0, [r7, #28]
 80039c2:	f000 f891 	bl	8003ae8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039c6:	2301      	movs	r3, #1
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	e002      	b.n	80039d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039cc:	f04f 33ff 	mov.w	r3, #4294967295
 80039d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039d2:	69bb      	ldr	r3, [r7, #24]
	}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039f4:	3b01      	subs	r3, #1
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f023 0307 	bic.w	r3, r3, #7
 8003a02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <prvInitialiseNewTask+0x46>
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	e7fe      	b.n	8003a20 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01f      	beq.n	8003a68 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	e012      	b.n	8003a54 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	4413      	add	r3, r2
 8003a34:	7819      	ldrb	r1, [r3, #0]
 8003a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3334      	adds	r3, #52	; 0x34
 8003a3e:	460a      	mov	r2, r1
 8003a40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	4413      	add	r3, r2
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d006      	beq.n	8003a5c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3301      	adds	r3, #1
 8003a52:	61fb      	str	r3, [r7, #28]
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	2b0f      	cmp	r3, #15
 8003a58:	d9e9      	bls.n	8003a2e <prvInitialiseNewTask+0x52>
 8003a5a:	e000      	b.n	8003a5e <prvInitialiseNewTask+0x82>
			{
				break;
 8003a5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a66:	e003      	b.n	8003a70 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d901      	bls.n	8003a7a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a76:	2306      	movs	r3, #6
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	2200      	movs	r2, #0
 8003a8a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fea9 	bl	80037e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	3318      	adds	r3, #24
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff fea4 	bl	80037e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	f1c3 0207 	rsb	r2, r3, #7
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	2200      	movs	r2, #0
 8003aba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	68f9      	ldr	r1, [r7, #12]
 8003ac8:	69b8      	ldr	r0, [r7, #24]
 8003aca:	f000 fc6f 	bl	80043ac <pxPortInitialiseStack>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ade:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ae0:	bf00      	nop
 8003ae2:	3720      	adds	r7, #32
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003af0:	f000 fd84 	bl	80045fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003af4:	4b2a      	ldr	r3, [pc, #168]	; (8003ba0 <prvAddNewTaskToReadyList+0xb8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	4a29      	ldr	r2, [pc, #164]	; (8003ba0 <prvAddNewTaskToReadyList+0xb8>)
 8003afc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003afe:	4b29      	ldr	r3, [pc, #164]	; (8003ba4 <prvAddNewTaskToReadyList+0xbc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b06:	4a27      	ldr	r2, [pc, #156]	; (8003ba4 <prvAddNewTaskToReadyList+0xbc>)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b0c:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <prvAddNewTaskToReadyList+0xb8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d110      	bne.n	8003b36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b14:	f000 fb72 	bl	80041fc <prvInitialiseTaskLists>
 8003b18:	e00d      	b.n	8003b36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b1a:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <prvAddNewTaskToReadyList+0xc0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <prvAddNewTaskToReadyList+0xbc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d802      	bhi.n	8003b36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b30:	4a1c      	ldr	r2, [pc, #112]	; (8003ba4 <prvAddNewTaskToReadyList+0xbc>)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b36:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <prvAddNewTaskToReadyList+0xc4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	4a1b      	ldr	r2, [pc, #108]	; (8003bac <prvAddNewTaskToReadyList+0xc4>)
 8003b3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	2201      	movs	r2, #1
 8003b46:	409a      	lsls	r2, r3
 8003b48:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <prvAddNewTaskToReadyList+0xc8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <prvAddNewTaskToReadyList+0xc8>)
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <prvAddNewTaskToReadyList+0xcc>)
 8003b60:	441a      	add	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4619      	mov	r1, r3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f7ff fe4a 	bl	8003802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b6e:	f000 fd73 	bl	8004658 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <prvAddNewTaskToReadyList+0xc0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00e      	beq.n	8003b98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <prvAddNewTaskToReadyList+0xbc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d207      	bcs.n	8003b98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <prvAddNewTaskToReadyList+0xd0>)
 8003b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20000454 	.word	0x20000454
 8003ba4:	20000354 	.word	0x20000354
 8003ba8:	20000460 	.word	0x20000460
 8003bac:	20000470 	.word	0x20000470
 8003bb0:	2000045c 	.word	0x2000045c
 8003bb4:	20000358 	.word	0x20000358
 8003bb8:	e000ed04 	.word	0xe000ed04

08003bbc <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8003bc4:	f000 fd1a 	bl	80045fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <uxTaskPriorityGet+0x18>
 8003bce:	4b07      	ldr	r3, [pc, #28]	; (8003bec <uxTaskPriorityGet+0x30>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	e000      	b.n	8003bd6 <uxTaskPriorityGet+0x1a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8003bde:	f000 fd3b 	bl	8004658 <vPortExitCritical>

		return uxReturn;
 8003be2:	68bb      	ldr	r3, [r7, #8]
	}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000354 	.word	0x20000354

08003bf0 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bf8:	f000 fddc 	bl	80047b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bfc:	f3ef 8211 	mrs	r2, BASEPRI
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	613a      	str	r2, [r7, #16]
 8003c12:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c14:	693b      	ldr	r3, [r7, #16]

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c16:	61fb      	str	r3, [r7, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d102      	bne.n	8003c24 <uxTaskPriorityGetFromISR+0x34>
 8003c1e:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <uxTaskPriorityGetFromISR+0x54>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	e000      	b.n	8003c26 <uxTaskPriorityGetFromISR+0x36>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	61bb      	str	r3, [r7, #24]
			uxReturn = pxTCB->uxPriority;
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f383 8811 	msr	BASEPRI, r3
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 8003c38:	697b      	ldr	r3, [r7, #20]
	}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3720      	adds	r7, #32
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000354 	.word	0x20000354

08003c48 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b06      	cmp	r3, #6
 8003c5a:	d909      	bls.n	8003c70 <vTaskPrioritySet+0x28>
	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	e7fe      	b.n	8003c6e <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d901      	bls.n	8003c7a <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c76:	2306      	movs	r3, #6
 8003c78:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8003c7a:	f000 fcbf 	bl	80045fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <vTaskPrioritySet+0x42>
 8003c84:	4b40      	ldr	r3, [pc, #256]	; (8003d88 <vTaskPrioritySet+0x140>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	e000      	b.n	8003c8c <vTaskPrioritySet+0x44>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d06f      	beq.n	8003d7c <vTaskPrioritySet+0x134>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d90d      	bls.n	8003cc0 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 8003ca4:	4b38      	ldr	r3, [pc, #224]	; (8003d88 <vTaskPrioritySet+0x140>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d00f      	beq.n	8003cce <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003cae:	4b36      	ldr	r3, [pc, #216]	; (8003d88 <vTaskPrioritySet+0x140>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d309      	bcc.n	8003cce <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	e006      	b.n	8003cce <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8003cc0:	4b31      	ldr	r3, [pc, #196]	; (8003d88 <vTaskPrioritySet+0x140>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d101      	bne.n	8003cce <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d102      	bne.n	8003ce6 <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	db04      	blt.n	8003cfe <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	f1c3 0207 	rsb	r2, r3, #7
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	6959      	ldr	r1, [r3, #20]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <vTaskPrioritySet+0x144>)
 8003d0e:	4413      	add	r3, r2
 8003d10:	4299      	cmp	r1, r3
 8003d12:	d128      	bne.n	8003d66 <vTaskPrioritySet+0x11e>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fd96 	bl	800384a <uxListRemove>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d109      	bne.n	8003d38 <vTaskPrioritySet+0xf0>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8003d24:	2201      	movs	r2, #1
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43da      	mvns	r2, r3
 8003d2e:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <vTaskPrioritySet+0x148>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4013      	ands	r3, r2
 8003d34:	4a16      	ldr	r2, [pc, #88]	; (8003d90 <vTaskPrioritySet+0x148>)
 8003d36:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <vTaskPrioritySet+0x148>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <vTaskPrioritySet+0x148>)
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4a0d      	ldr	r2, [pc, #52]	; (8003d8c <vTaskPrioritySet+0x144>)
 8003d58:	441a      	add	r2, r3
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4610      	mov	r0, r2
 8003d62:	f7ff fd4e 	bl	8003802 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <vTaskPrioritySet+0x134>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <vTaskPrioritySet+0x14c>)
 8003d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003d7c:	f000 fc6c 	bl	8004658 <vPortExitCritical>
	}
 8003d80:	bf00      	nop
 8003d82:	3720      	adds	r7, #32
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	20000354 	.word	0x20000354
 8003d8c:	20000358 	.word	0x20000358
 8003d90:	2000045c 	.word	0x2000045c
 8003d94:	e000ed04 	.word	0xe000ed04

08003d98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08a      	sub	sp, #40	; 0x28
 8003d9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003da6:	463a      	mov	r2, r7
 8003da8:	1d39      	adds	r1, r7, #4
 8003daa:	f107 0308 	add.w	r3, r7, #8
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd f804 	bl	8000dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003db4:	6839      	ldr	r1, [r7, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	9202      	str	r2, [sp, #8]
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	460a      	mov	r2, r1
 8003dc6:	491d      	ldr	r1, [pc, #116]	; (8003e3c <vTaskStartScheduler+0xa4>)
 8003dc8:	481d      	ldr	r0, [pc, #116]	; (8003e40 <vTaskStartScheduler+0xa8>)
 8003dca:	f7ff fd68 	bl	800389e <xTaskCreateStatic>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	4b1c      	ldr	r3, [pc, #112]	; (8003e44 <vTaskStartScheduler+0xac>)
 8003dd2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <vTaskStartScheduler+0xac>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e001      	b.n	8003de6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d115      	bne.n	8003e18 <vTaskStartScheduler+0x80>
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003dfe:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <vTaskStartScheduler+0xb0>)
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295
 8003e04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e06:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <vTaskStartScheduler+0xb4>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e0c:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <vTaskStartScheduler+0xb8>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e12:	f000 fb55 	bl	80044c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e16:	e00d      	b.n	8003e34 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d109      	bne.n	8003e34 <vTaskStartScheduler+0x9c>
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	e7fe      	b.n	8003e32 <vTaskStartScheduler+0x9a>
}
 8003e34:	bf00      	nop
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	08005518 	.word	0x08005518
 8003e40:	080041cd 	.word	0x080041cd
 8003e44:	20000478 	.word	0x20000478
 8003e48:	20000474 	.word	0x20000474
 8003e4c:	20000460 	.word	0x20000460
 8003e50:	20000458 	.word	0x20000458

08003e54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e58:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <vTaskSuspendAll+0x18>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	4a03      	ldr	r2, [pc, #12]	; (8003e6c <vTaskSuspendAll+0x18>)
 8003e60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003e62:	bf00      	nop
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	2000047c 	.word	0x2000047c

08003e70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e7e:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <xTaskResumeAll+0x114>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <xTaskResumeAll+0x2a>
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	e7fe      	b.n	8003e98 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e9a:	f000 fbaf 	bl	80045fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e9e:	4b39      	ldr	r3, [pc, #228]	; (8003f84 <xTaskResumeAll+0x114>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	4a37      	ldr	r2, [pc, #220]	; (8003f84 <xTaskResumeAll+0x114>)
 8003ea6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ea8:	4b36      	ldr	r3, [pc, #216]	; (8003f84 <xTaskResumeAll+0x114>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d161      	bne.n	8003f74 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003eb0:	4b35      	ldr	r3, [pc, #212]	; (8003f88 <xTaskResumeAll+0x118>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d05d      	beq.n	8003f74 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eb8:	e02e      	b.n	8003f18 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eba:	4b34      	ldr	r3, [pc, #208]	; (8003f8c <xTaskResumeAll+0x11c>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3318      	adds	r3, #24
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fcbf 	bl	800384a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff fcba 	bl	800384a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	2201      	movs	r2, #1
 8003edc:	409a      	lsls	r2, r3
 8003ede:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <xTaskResumeAll+0x120>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	4a2a      	ldr	r2, [pc, #168]	; (8003f90 <xTaskResumeAll+0x120>)
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4a27      	ldr	r2, [pc, #156]	; (8003f94 <xTaskResumeAll+0x124>)
 8003ef6:	441a      	add	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3304      	adds	r3, #4
 8003efc:	4619      	mov	r1, r3
 8003efe:	4610      	mov	r0, r2
 8003f00:	f7ff fc7f 	bl	8003802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	4b23      	ldr	r3, [pc, #140]	; (8003f98 <xTaskResumeAll+0x128>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d302      	bcc.n	8003f18 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003f12:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <xTaskResumeAll+0x12c>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f18:	4b1c      	ldr	r3, [pc, #112]	; (8003f8c <xTaskResumeAll+0x11c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1cc      	bne.n	8003eba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f26:	f000 fa03 	bl	8004330 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f2a:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <xTaskResumeAll+0x130>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d010      	beq.n	8003f58 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f36:	f000 f837 	bl	8003fa8 <xTaskIncrementTick>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003f40:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <xTaskResumeAll+0x12c>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f1      	bne.n	8003f36 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003f52:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <xTaskResumeAll+0x130>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f58:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <xTaskResumeAll+0x12c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d009      	beq.n	8003f74 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f64:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <xTaskResumeAll+0x134>)
 8003f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f74:	f000 fb70 	bl	8004658 <vPortExitCritical>

	return xAlreadyYielded;
 8003f78:	68bb      	ldr	r3, [r7, #8]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	2000047c 	.word	0x2000047c
 8003f88:	20000454 	.word	0x20000454
 8003f8c:	20000414 	.word	0x20000414
 8003f90:	2000045c 	.word	0x2000045c
 8003f94:	20000358 	.word	0x20000358
 8003f98:	20000354 	.word	0x20000354
 8003f9c:	20000468 	.word	0x20000468
 8003fa0:	20000464 	.word	0x20000464
 8003fa4:	e000ed04 	.word	0xe000ed04

08003fa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb2:	4b4e      	ldr	r3, [pc, #312]	; (80040ec <xTaskIncrementTick+0x144>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f040 8087 	bne.w	80040ca <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fbc:	4b4c      	ldr	r3, [pc, #304]	; (80040f0 <xTaskIncrementTick+0x148>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fc4:	4a4a      	ldr	r2, [pc, #296]	; (80040f0 <xTaskIncrementTick+0x148>)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d11f      	bne.n	8004010 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fd0:	4b48      	ldr	r3, [pc, #288]	; (80040f4 <xTaskIncrementTick+0x14c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <xTaskIncrementTick+0x46>
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	e7fe      	b.n	8003fec <xTaskIncrementTick+0x44>
 8003fee:	4b41      	ldr	r3, [pc, #260]	; (80040f4 <xTaskIncrementTick+0x14c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	4b40      	ldr	r3, [pc, #256]	; (80040f8 <xTaskIncrementTick+0x150>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a3e      	ldr	r2, [pc, #248]	; (80040f4 <xTaskIncrementTick+0x14c>)
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4a3e      	ldr	r2, [pc, #248]	; (80040f8 <xTaskIncrementTick+0x150>)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	4b3e      	ldr	r3, [pc, #248]	; (80040fc <xTaskIncrementTick+0x154>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3301      	adds	r3, #1
 8004008:	4a3c      	ldr	r2, [pc, #240]	; (80040fc <xTaskIncrementTick+0x154>)
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	f000 f990 	bl	8004330 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004010:	4b3b      	ldr	r3, [pc, #236]	; (8004100 <xTaskIncrementTick+0x158>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	429a      	cmp	r2, r3
 8004018:	d348      	bcc.n	80040ac <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800401a:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <xTaskIncrementTick+0x14c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d104      	bne.n	800402e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004024:	4b36      	ldr	r3, [pc, #216]	; (8004100 <xTaskIncrementTick+0x158>)
 8004026:	f04f 32ff 	mov.w	r2, #4294967295
 800402a:	601a      	str	r2, [r3, #0]
					break;
 800402c:	e03e      	b.n	80040ac <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800402e:	4b31      	ldr	r3, [pc, #196]	; (80040f4 <xTaskIncrementTick+0x14c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	429a      	cmp	r2, r3
 8004044:	d203      	bcs.n	800404e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004046:	4a2e      	ldr	r2, [pc, #184]	; (8004100 <xTaskIncrementTick+0x158>)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800404c:	e02e      	b.n	80040ac <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3304      	adds	r3, #4
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fbf9 	bl	800384a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d004      	beq.n	800406a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	3318      	adds	r3, #24
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fbf0 	bl	800384a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	2201      	movs	r2, #1
 8004070:	409a      	lsls	r2, r3
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <xTaskIncrementTick+0x15c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	4a22      	ldr	r2, [pc, #136]	; (8004104 <xTaskIncrementTick+0x15c>)
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4a1f      	ldr	r2, [pc, #124]	; (8004108 <xTaskIncrementTick+0x160>)
 800408a:	441a      	add	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	3304      	adds	r3, #4
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f7ff fbb5 	bl	8003802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	4b1b      	ldr	r3, [pc, #108]	; (800410c <xTaskIncrementTick+0x164>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d3b9      	bcc.n	800401a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80040a6:	2301      	movs	r3, #1
 80040a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040aa:	e7b6      	b.n	800401a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040ac:	4b17      	ldr	r3, [pc, #92]	; (800410c <xTaskIncrementTick+0x164>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b2:	4915      	ldr	r1, [pc, #84]	; (8004108 <xTaskIncrementTick+0x160>)
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d907      	bls.n	80040d4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80040c4:	2301      	movs	r3, #1
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e004      	b.n	80040d4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040ca:	4b11      	ldr	r3, [pc, #68]	; (8004110 <xTaskIncrementTick+0x168>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3301      	adds	r3, #1
 80040d0:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <xTaskIncrementTick+0x168>)
 80040d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040d4:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <xTaskIncrementTick+0x16c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80040dc:	2301      	movs	r3, #1
 80040de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040e0:	697b      	ldr	r3, [r7, #20]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	2000047c 	.word	0x2000047c
 80040f0:	20000458 	.word	0x20000458
 80040f4:	2000040c 	.word	0x2000040c
 80040f8:	20000410 	.word	0x20000410
 80040fc:	2000046c 	.word	0x2000046c
 8004100:	20000474 	.word	0x20000474
 8004104:	2000045c 	.word	0x2000045c
 8004108:	20000358 	.word	0x20000358
 800410c:	20000354 	.word	0x20000354
 8004110:	20000464 	.word	0x20000464
 8004114:	20000468 	.word	0x20000468

08004118 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <vTaskSwitchContext+0xa0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004126:	4b25      	ldr	r3, [pc, #148]	; (80041bc <vTaskSwitchContext+0xa4>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800412c:	e03e      	b.n	80041ac <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <vTaskSwitchContext+0xa4>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004134:	4b22      	ldr	r3, [pc, #136]	; (80041c0 <vTaskSwitchContext+0xa8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	fab3 f383 	clz	r3, r3
 8004140:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004142:	7afb      	ldrb	r3, [r7, #11]
 8004144:	f1c3 031f 	rsb	r3, r3, #31
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	491e      	ldr	r1, [pc, #120]	; (80041c4 <vTaskSwitchContext+0xac>)
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <vTaskSwitchContext+0x5a>
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	607b      	str	r3, [r7, #4]
 8004170:	e7fe      	b.n	8004170 <vTaskSwitchContext+0x58>
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4a11      	ldr	r2, [pc, #68]	; (80041c4 <vTaskSwitchContext+0xac>)
 800417e:	4413      	add	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	3308      	adds	r3, #8
 8004194:	429a      	cmp	r2, r3
 8004196:	d104      	bne.n	80041a2 <vTaskSwitchContext+0x8a>
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4a07      	ldr	r2, [pc, #28]	; (80041c8 <vTaskSwitchContext+0xb0>)
 80041aa:	6013      	str	r3, [r2, #0]
}
 80041ac:	bf00      	nop
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	2000047c 	.word	0x2000047c
 80041bc:	20000468 	.word	0x20000468
 80041c0:	2000045c 	.word	0x2000045c
 80041c4:	20000358 	.word	0x20000358
 80041c8:	20000354 	.word	0x20000354

080041cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041d4:	f000 f852 	bl	800427c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <prvIdleTask+0x28>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d9f9      	bls.n	80041d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041e0:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <prvIdleTask+0x2c>)
 80041e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041f0:	e7f0      	b.n	80041d4 <prvIdleTask+0x8>
 80041f2:	bf00      	nop
 80041f4:	20000358 	.word	0x20000358
 80041f8:	e000ed04 	.word	0xe000ed04

080041fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004202:	2300      	movs	r3, #0
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	e00c      	b.n	8004222 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4a12      	ldr	r2, [pc, #72]	; (800425c <prvInitialiseTaskLists+0x60>)
 8004214:	4413      	add	r3, r2
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fac6 	bl	80037a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3301      	adds	r3, #1
 8004220:	607b      	str	r3, [r7, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b06      	cmp	r3, #6
 8004226:	d9ef      	bls.n	8004208 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004228:	480d      	ldr	r0, [pc, #52]	; (8004260 <prvInitialiseTaskLists+0x64>)
 800422a:	f7ff fabd 	bl	80037a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800422e:	480d      	ldr	r0, [pc, #52]	; (8004264 <prvInitialiseTaskLists+0x68>)
 8004230:	f7ff faba 	bl	80037a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004234:	480c      	ldr	r0, [pc, #48]	; (8004268 <prvInitialiseTaskLists+0x6c>)
 8004236:	f7ff fab7 	bl	80037a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800423a:	480c      	ldr	r0, [pc, #48]	; (800426c <prvInitialiseTaskLists+0x70>)
 800423c:	f7ff fab4 	bl	80037a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004240:	480b      	ldr	r0, [pc, #44]	; (8004270 <prvInitialiseTaskLists+0x74>)
 8004242:	f7ff fab1 	bl	80037a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <prvInitialiseTaskLists+0x78>)
 8004248:	4a05      	ldr	r2, [pc, #20]	; (8004260 <prvInitialiseTaskLists+0x64>)
 800424a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <prvInitialiseTaskLists+0x7c>)
 800424e:	4a05      	ldr	r2, [pc, #20]	; (8004264 <prvInitialiseTaskLists+0x68>)
 8004250:	601a      	str	r2, [r3, #0]
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000358 	.word	0x20000358
 8004260:	200003e4 	.word	0x200003e4
 8004264:	200003f8 	.word	0x200003f8
 8004268:	20000414 	.word	0x20000414
 800426c:	20000428 	.word	0x20000428
 8004270:	20000440 	.word	0x20000440
 8004274:	2000040c 	.word	0x2000040c
 8004278:	20000410 	.word	0x20000410

0800427c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004282:	e019      	b.n	80042b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004284:	f000 f9ba 	bl	80045fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004288:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <prvCheckTasksWaitingTermination+0x4c>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fad8 	bl	800384a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <prvCheckTasksWaitingTermination+0x50>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3b01      	subs	r3, #1
 80042a0:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <prvCheckTasksWaitingTermination+0x50>)
 80042a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <prvCheckTasksWaitingTermination+0x54>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <prvCheckTasksWaitingTermination+0x54>)
 80042ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042ae:	f000 f9d3 	bl	8004658 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f80e 	bl	80042d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <prvCheckTasksWaitingTermination+0x54>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e1      	bne.n	8004284 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20000428 	.word	0x20000428
 80042cc:	20000454 	.word	0x20000454
 80042d0:	2000043c 	.word	0x2000043c

080042d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d108      	bne.n	80042f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fb62 	bl	80049b4 <vPortFree>
				vPortFree( pxTCB );
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fb5f 	bl	80049b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042f6:	e017      	b.n	8004328 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d103      	bne.n	800430a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fb56 	bl	80049b4 <vPortFree>
	}
 8004308:	e00e      	b.n	8004328 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004310:	2b02      	cmp	r3, #2
 8004312:	d009      	beq.n	8004328 <prvDeleteTCB+0x54>
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e7fe      	b.n	8004326 <prvDeleteTCB+0x52>
	}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <prvResetNextTaskUnblockTime+0x38>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d104      	bne.n	800434a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004340:	4b0a      	ldr	r3, [pc, #40]	; (800436c <prvResetNextTaskUnblockTime+0x3c>)
 8004342:	f04f 32ff 	mov.w	r2, #4294967295
 8004346:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004348:	e008      	b.n	800435c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <prvResetNextTaskUnblockTime+0x38>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a04      	ldr	r2, [pc, #16]	; (800436c <prvResetNextTaskUnblockTime+0x3c>)
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	2000040c 	.word	0x2000040c
 800436c:	20000474 	.word	0x20000474

08004370 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <xTaskGetSchedulerState+0x34>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800437e:	2301      	movs	r3, #1
 8004380:	607b      	str	r3, [r7, #4]
 8004382:	e008      	b.n	8004396 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004384:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <xTaskGetSchedulerState+0x38>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800438c:	2302      	movs	r3, #2
 800438e:	607b      	str	r3, [r7, #4]
 8004390:	e001      	b.n	8004396 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004392:	2300      	movs	r3, #0
 8004394:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004396:	687b      	ldr	r3, [r7, #4]
	}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	20000460 	.word	0x20000460
 80043a8:	2000047c 	.word	0x2000047c

080043ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3b04      	subs	r3, #4
 80043bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3b04      	subs	r3, #4
 80043ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3b04      	subs	r3, #4
 80043da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043dc:	4a0c      	ldr	r2, [pc, #48]	; (8004410 <pxPortInitialiseStack+0x64>)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3b14      	subs	r3, #20
 80043e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3b04      	subs	r3, #4
 80043f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f06f 0202 	mvn.w	r2, #2
 80043fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3b20      	subs	r3, #32
 8004400:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004402:	68fb      	ldr	r3, [r7, #12]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	08004415 	.word	0x08004415

08004414 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <prvTaskExitError+0x50>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d009      	beq.n	800443c <prvTaskExitError+0x28>
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e7fe      	b.n	800443a <prvTaskExitError+0x26>
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800444e:	bf00      	nop
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0fc      	beq.n	8004450 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	2000000c 	.word	0x2000000c
	...

08004470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <pxCurrentTCBConst2>)
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	6808      	ldr	r0, [r1, #0]
 8004476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447a:	f380 8809 	msr	PSP, r0
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f380 8811 	msr	BASEPRI, r0
 800448a:	4770      	bx	lr
 800448c:	f3af 8000 	nop.w

08004490 <pxCurrentTCBConst2>:
 8004490:	20000354 	.word	0x20000354
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop

08004498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004498:	4808      	ldr	r0, [pc, #32]	; (80044bc <prvPortStartFirstTask+0x24>)
 800449a:	6800      	ldr	r0, [r0, #0]
 800449c:	6800      	ldr	r0, [r0, #0]
 800449e:	f380 8808 	msr	MSP, r0
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f380 8814 	msr	CONTROL, r0
 80044aa:	b662      	cpsie	i
 80044ac:	b661      	cpsie	f
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	df00      	svc	0
 80044b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044ba:	bf00      	nop
 80044bc:	e000ed08 	.word	0xe000ed08

080044c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044c6:	4b44      	ldr	r3, [pc, #272]	; (80045d8 <xPortStartScheduler+0x118>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a44      	ldr	r2, [pc, #272]	; (80045dc <xPortStartScheduler+0x11c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d109      	bne.n	80044e4 <xPortStartScheduler+0x24>
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	e7fe      	b.n	80044e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044e4:	4b3c      	ldr	r3, [pc, #240]	; (80045d8 <xPortStartScheduler+0x118>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a3d      	ldr	r2, [pc, #244]	; (80045e0 <xPortStartScheduler+0x120>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d109      	bne.n	8004502 <xPortStartScheduler+0x42>
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	e7fe      	b.n	8004500 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004502:	4b38      	ldr	r3, [pc, #224]	; (80045e4 <xPortStartScheduler+0x124>)
 8004504:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	22ff      	movs	r2, #255	; 0xff
 8004512:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004524:	b2da      	uxtb	r2, r3
 8004526:	4b30      	ldr	r3, [pc, #192]	; (80045e8 <xPortStartScheduler+0x128>)
 8004528:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800452a:	4b30      	ldr	r3, [pc, #192]	; (80045ec <xPortStartScheduler+0x12c>)
 800452c:	2207      	movs	r2, #7
 800452e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004530:	e009      	b.n	8004546 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004532:	4b2e      	ldr	r3, [pc, #184]	; (80045ec <xPortStartScheduler+0x12c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3b01      	subs	r3, #1
 8004538:	4a2c      	ldr	r2, [pc, #176]	; (80045ec <xPortStartScheduler+0x12c>)
 800453a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	2b80      	cmp	r3, #128	; 0x80
 8004550:	d0ef      	beq.n	8004532 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004552:	4b26      	ldr	r3, [pc, #152]	; (80045ec <xPortStartScheduler+0x12c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f1c3 0307 	rsb	r3, r3, #7
 800455a:	2b04      	cmp	r3, #4
 800455c:	d009      	beq.n	8004572 <xPortStartScheduler+0xb2>
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	e7fe      	b.n	8004570 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004572:	4b1e      	ldr	r3, [pc, #120]	; (80045ec <xPortStartScheduler+0x12c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	4a1c      	ldr	r2, [pc, #112]	; (80045ec <xPortStartScheduler+0x12c>)
 800457a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800457c:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <xPortStartScheduler+0x12c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004584:	4a19      	ldr	r2, [pc, #100]	; (80045ec <xPortStartScheduler+0x12c>)
 8004586:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	b2da      	uxtb	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004590:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <xPortStartScheduler+0x130>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a16      	ldr	r2, [pc, #88]	; (80045f0 <xPortStartScheduler+0x130>)
 8004596:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800459a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800459c:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <xPortStartScheduler+0x130>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <xPortStartScheduler+0x130>)
 80045a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045a8:	f000 f8d6 	bl	8004758 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045ac:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <xPortStartScheduler+0x134>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045b2:	f000 f8f5 	bl	80047a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045b6:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <xPortStartScheduler+0x138>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a0f      	ldr	r2, [pc, #60]	; (80045f8 <xPortStartScheduler+0x138>)
 80045bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045c2:	f7ff ff69 	bl	8004498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045c6:	f7ff fda7 	bl	8004118 <vTaskSwitchContext>
	prvTaskExitError();
 80045ca:	f7ff ff23 	bl	8004414 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	e000ed00 	.word	0xe000ed00
 80045dc:	410fc271 	.word	0x410fc271
 80045e0:	410fc270 	.word	0x410fc270
 80045e4:	e000e400 	.word	0xe000e400
 80045e8:	20000480 	.word	0x20000480
 80045ec:	20000484 	.word	0x20000484
 80045f0:	e000ed20 	.word	0xe000ed20
 80045f4:	2000000c 	.word	0x2000000c
 80045f8:	e000ef34 	.word	0xe000ef34

080045fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004614:	4b0e      	ldr	r3, [pc, #56]	; (8004650 <vPortEnterCritical+0x54>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3301      	adds	r3, #1
 800461a:	4a0d      	ldr	r2, [pc, #52]	; (8004650 <vPortEnterCritical+0x54>)
 800461c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800461e:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <vPortEnterCritical+0x54>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d10e      	bne.n	8004644 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <vPortEnterCritical+0x58>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d009      	beq.n	8004644 <vPortEnterCritical+0x48>
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	603b      	str	r3, [r7, #0]
 8004642:	e7fe      	b.n	8004642 <vPortEnterCritical+0x46>
	}
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	2000000c 	.word	0x2000000c
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800465e:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <vPortExitCritical+0x4c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <vPortExitCritical+0x22>
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	e7fe      	b.n	8004678 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800467a:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <vPortExitCritical+0x4c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3b01      	subs	r3, #1
 8004680:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <vPortExitCritical+0x4c>)
 8004682:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004684:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <vPortExitCritical+0x4c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <vPortExitCritical+0x3e>
 800468c:	2300      	movs	r3, #0
 800468e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	2000000c 	.word	0x2000000c
	...

080046b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046b0:	f3ef 8009 	mrs	r0, PSP
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	4b15      	ldr	r3, [pc, #84]	; (8004710 <pxCurrentTCBConst>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	f01e 0f10 	tst.w	lr, #16
 80046c0:	bf08      	it	eq
 80046c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ca:	6010      	str	r0, [r2, #0]
 80046cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046d4:	f380 8811 	msr	BASEPRI, r0
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f7ff fd1a 	bl	8004118 <vTaskSwitchContext>
 80046e4:	f04f 0000 	mov.w	r0, #0
 80046e8:	f380 8811 	msr	BASEPRI, r0
 80046ec:	bc09      	pop	{r0, r3}
 80046ee:	6819      	ldr	r1, [r3, #0]
 80046f0:	6808      	ldr	r0, [r1, #0]
 80046f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f6:	f01e 0f10 	tst.w	lr, #16
 80046fa:	bf08      	it	eq
 80046fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004700:	f380 8809 	msr	PSP, r0
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	f3af 8000 	nop.w

08004710 <pxCurrentTCBConst>:
 8004710:	20000354 	.word	0x20000354
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop

08004718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004730:	f7ff fc3a 	bl	8003fa8 <xTaskIncrementTick>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800473a:	4b06      	ldr	r3, [pc, #24]	; (8004754 <xPortSysTickHandler+0x3c>)
 800473c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	2300      	movs	r3, #0
 8004744:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800474c:	bf00      	nop
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	e000ed04 	.word	0xe000ed04

08004758 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <vPortSetupTimerInterrupt+0x34>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004762:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <vPortSetupTimerInterrupt+0x38>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <vPortSetupTimerInterrupt+0x3c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <vPortSetupTimerInterrupt+0x40>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	099b      	lsrs	r3, r3, #6
 8004774:	4a09      	ldr	r2, [pc, #36]	; (800479c <vPortSetupTimerInterrupt+0x44>)
 8004776:	3b01      	subs	r3, #1
 8004778:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800477a:	4b04      	ldr	r3, [pc, #16]	; (800478c <vPortSetupTimerInterrupt+0x34>)
 800477c:	2207      	movs	r2, #7
 800477e:	601a      	str	r2, [r3, #0]
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	e000e010 	.word	0xe000e010
 8004790:	e000e018 	.word	0xe000e018
 8004794:	20000000 	.word	0x20000000
 8004798:	10624dd3 	.word	0x10624dd3
 800479c:	e000e014 	.word	0xe000e014

080047a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047b0 <vPortEnableVFP+0x10>
 80047a4:	6801      	ldr	r1, [r0, #0]
 80047a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047aa:	6001      	str	r1, [r0, #0]
 80047ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80047ae:	bf00      	nop
 80047b0:	e000ed88 	.word	0xe000ed88

080047b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80047ba:	f3ef 8305 	mrs	r3, IPSR
 80047be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b0f      	cmp	r3, #15
 80047c4:	d913      	bls.n	80047ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047c6:	4a16      	ldr	r2, [pc, #88]	; (8004820 <vPortValidateInterruptPriority+0x6c>)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047d0:	4b14      	ldr	r3, [pc, #80]	; (8004824 <vPortValidateInterruptPriority+0x70>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	7afa      	ldrb	r2, [r7, #11]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d209      	bcs.n	80047ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	e7fe      	b.n	80047ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047ee:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <vPortValidateInterruptPriority+0x74>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047f6:	4b0d      	ldr	r3, [pc, #52]	; (800482c <vPortValidateInterruptPriority+0x78>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d909      	bls.n	8004812 <vPortValidateInterruptPriority+0x5e>
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	e7fe      	b.n	8004810 <vPortValidateInterruptPriority+0x5c>
	}
 8004812:	bf00      	nop
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e000e3f0 	.word	0xe000e3f0
 8004824:	20000480 	.word	0x20000480
 8004828:	e000ed0c 	.word	0xe000ed0c
 800482c:	20000484 	.word	0x20000484

08004830 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	; 0x28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004838:	2300      	movs	r3, #0
 800483a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800483c:	f7ff fb0a 	bl	8003e54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004840:	4b57      	ldr	r3, [pc, #348]	; (80049a0 <pvPortMalloc+0x170>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004848:	f000 f90c 	bl	8004a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800484c:	4b55      	ldr	r3, [pc, #340]	; (80049a4 <pvPortMalloc+0x174>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	f040 808c 	bne.w	8004972 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01c      	beq.n	800489a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004860:	2208      	movs	r2, #8
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4413      	add	r3, r2
 8004866:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	2b00      	cmp	r3, #0
 8004870:	d013      	beq.n	800489a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f023 0307 	bic.w	r3, r3, #7
 8004878:	3308      	adds	r3, #8
 800487a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <pvPortMalloc+0x6a>
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	e7fe      	b.n	8004898 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d068      	beq.n	8004972 <pvPortMalloc+0x142>
 80048a0:	4b41      	ldr	r3, [pc, #260]	; (80049a8 <pvPortMalloc+0x178>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d863      	bhi.n	8004972 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80048aa:	4b40      	ldr	r3, [pc, #256]	; (80049ac <pvPortMalloc+0x17c>)
 80048ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80048ae:	4b3f      	ldr	r3, [pc, #252]	; (80049ac <pvPortMalloc+0x17c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048b4:	e004      	b.n	80048c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d903      	bls.n	80048d2 <pvPortMalloc+0xa2>
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f1      	bne.n	80048b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048d2:	4b33      	ldr	r3, [pc, #204]	; (80049a0 <pvPortMalloc+0x170>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d8:	429a      	cmp	r2, r3
 80048da:	d04a      	beq.n	8004972 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2208      	movs	r2, #8
 80048e2:	4413      	add	r3, r2
 80048e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	1ad2      	subs	r2, r2, r3
 80048f6:	2308      	movs	r3, #8
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d91e      	bls.n	800493c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4413      	add	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <pvPortMalloc+0xf4>
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	e7fe      	b.n	8004922 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	1ad2      	subs	r2, r2, r3
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004936:	69b8      	ldr	r0, [r7, #24]
 8004938:	f000 f8f6 	bl	8004b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800493c:	4b1a      	ldr	r3, [pc, #104]	; (80049a8 <pvPortMalloc+0x178>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	4a18      	ldr	r2, [pc, #96]	; (80049a8 <pvPortMalloc+0x178>)
 8004948:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800494a:	4b17      	ldr	r3, [pc, #92]	; (80049a8 <pvPortMalloc+0x178>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4b18      	ldr	r3, [pc, #96]	; (80049b0 <pvPortMalloc+0x180>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d203      	bcs.n	800495e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <pvPortMalloc+0x178>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <pvPortMalloc+0x180>)
 800495c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <pvPortMalloc+0x174>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	431a      	orrs	r2, r3
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004972:	f7ff fa7d 	bl	8003e70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	2b00      	cmp	r3, #0
 800497e:	d009      	beq.n	8004994 <pvPortMalloc+0x164>
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	e7fe      	b.n	8004992 <pvPortMalloc+0x162>
	return pvReturn;
 8004994:	69fb      	ldr	r3, [r7, #28]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3728      	adds	r7, #40	; 0x28
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20004090 	.word	0x20004090
 80049a4:	2000409c 	.word	0x2000409c
 80049a8:	20004094 	.word	0x20004094
 80049ac:	20004088 	.word	0x20004088
 80049b0:	20004098 	.word	0x20004098

080049b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d046      	beq.n	8004a54 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049c6:	2308      	movs	r3, #8
 80049c8:	425b      	negs	r3, r3
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4413      	add	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <vPortFree+0xa8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4013      	ands	r3, r2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d109      	bne.n	80049f6 <vPortFree+0x42>
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e7fe      	b.n	80049f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <vPortFree+0x5e>
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	e7fe      	b.n	8004a10 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <vPortFree+0xa8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d019      	beq.n	8004a54 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d115      	bne.n	8004a54 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <vPortFree+0xa8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	43db      	mvns	r3, r3
 8004a32:	401a      	ands	r2, r3
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a38:	f7ff fa0c 	bl	8003e54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <vPortFree+0xac>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4413      	add	r3, r2
 8004a46:	4a06      	ldr	r2, [pc, #24]	; (8004a60 <vPortFree+0xac>)
 8004a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a4a:	6938      	ldr	r0, [r7, #16]
 8004a4c:	f000 f86c 	bl	8004b28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a50:	f7ff fa0e 	bl	8003e70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a54:	bf00      	nop
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	2000409c 	.word	0x2000409c
 8004a60:	20004094 	.word	0x20004094

08004a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a70:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <prvHeapInit+0xac>)
 8004a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00c      	beq.n	8004a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3307      	adds	r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0307 	bic.w	r3, r3, #7
 8004a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <prvHeapInit+0xac>)
 8004a94:	4413      	add	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a9c:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <prvHeapInit+0xb0>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004aa2:	4b1c      	ldr	r3, [pc, #112]	; (8004b14 <prvHeapInit+0xb0>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	4413      	add	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0307 	bic.w	r3, r3, #7
 8004abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <prvHeapInit+0xb4>)
 8004ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ac6:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <prvHeapInit+0xb4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ace:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <prvHeapInit+0xb4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <prvHeapInit+0xb4>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <prvHeapInit+0xb8>)
 8004af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <prvHeapInit+0xbc>)
 8004afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <prvHeapInit+0xc0>)
 8004afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b02:	601a      	str	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	20000488 	.word	0x20000488
 8004b14:	20004088 	.word	0x20004088
 8004b18:	20004090 	.word	0x20004090
 8004b1c:	20004098 	.word	0x20004098
 8004b20:	20004094 	.word	0x20004094
 8004b24:	2000409c 	.word	0x2000409c

08004b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b30:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <prvInsertBlockIntoFreeList+0xac>)
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e002      	b.n	8004b3c <prvInsertBlockIntoFreeList+0x14>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d8f7      	bhi.n	8004b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	4413      	add	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d108      	bne.n	8004b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	441a      	add	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	441a      	add	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d118      	bne.n	8004bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d00d      	beq.n	8004ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e008      	b.n	8004bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e003      	b.n	8004bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d002      	beq.n	8004bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20004088 	.word	0x20004088
 8004bd8:	20004090 	.word	0x20004090

08004bdc <__errno>:
 8004bdc:	4b01      	ldr	r3, [pc, #4]	; (8004be4 <__errno+0x8>)
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000010 	.word	0x20000010

08004be8 <__libc_init_array>:
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	4e0d      	ldr	r6, [pc, #52]	; (8004c20 <__libc_init_array+0x38>)
 8004bec:	4c0d      	ldr	r4, [pc, #52]	; (8004c24 <__libc_init_array+0x3c>)
 8004bee:	1ba4      	subs	r4, r4, r6
 8004bf0:	10a4      	asrs	r4, r4, #2
 8004bf2:	2500      	movs	r5, #0
 8004bf4:	42a5      	cmp	r5, r4
 8004bf6:	d109      	bne.n	8004c0c <__libc_init_array+0x24>
 8004bf8:	4e0b      	ldr	r6, [pc, #44]	; (8004c28 <__libc_init_array+0x40>)
 8004bfa:	4c0c      	ldr	r4, [pc, #48]	; (8004c2c <__libc_init_array+0x44>)
 8004bfc:	f000 fc28 	bl	8005450 <_init>
 8004c00:	1ba4      	subs	r4, r4, r6
 8004c02:	10a4      	asrs	r4, r4, #2
 8004c04:	2500      	movs	r5, #0
 8004c06:	42a5      	cmp	r5, r4
 8004c08:	d105      	bne.n	8004c16 <__libc_init_array+0x2e>
 8004c0a:	bd70      	pop	{r4, r5, r6, pc}
 8004c0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c10:	4798      	blx	r3
 8004c12:	3501      	adds	r5, #1
 8004c14:	e7ee      	b.n	8004bf4 <__libc_init_array+0xc>
 8004c16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c1a:	4798      	blx	r3
 8004c1c:	3501      	adds	r5, #1
 8004c1e:	e7f2      	b.n	8004c06 <__libc_init_array+0x1e>
 8004c20:	08005574 	.word	0x08005574
 8004c24:	08005574 	.word	0x08005574
 8004c28:	08005574 	.word	0x08005574
 8004c2c:	08005578 	.word	0x08005578

08004c30 <memcpy>:
 8004c30:	b510      	push	{r4, lr}
 8004c32:	1e43      	subs	r3, r0, #1
 8004c34:	440a      	add	r2, r1
 8004c36:	4291      	cmp	r1, r2
 8004c38:	d100      	bne.n	8004c3c <memcpy+0xc>
 8004c3a:	bd10      	pop	{r4, pc}
 8004c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c44:	e7f7      	b.n	8004c36 <memcpy+0x6>

08004c46 <memset>:
 8004c46:	4402      	add	r2, r0
 8004c48:	4603      	mov	r3, r0
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d100      	bne.n	8004c50 <memset+0xa>
 8004c4e:	4770      	bx	lr
 8004c50:	f803 1b01 	strb.w	r1, [r3], #1
 8004c54:	e7f9      	b.n	8004c4a <memset+0x4>
	...

08004c58 <siprintf>:
 8004c58:	b40e      	push	{r1, r2, r3}
 8004c5a:	b500      	push	{lr}
 8004c5c:	b09c      	sub	sp, #112	; 0x70
 8004c5e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c60:	9002      	str	r0, [sp, #8]
 8004c62:	9006      	str	r0, [sp, #24]
 8004c64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c68:	4809      	ldr	r0, [pc, #36]	; (8004c90 <siprintf+0x38>)
 8004c6a:	9107      	str	r1, [sp, #28]
 8004c6c:	9104      	str	r1, [sp, #16]
 8004c6e:	4909      	ldr	r1, [pc, #36]	; (8004c94 <siprintf+0x3c>)
 8004c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c74:	9105      	str	r1, [sp, #20]
 8004c76:	6800      	ldr	r0, [r0, #0]
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	a902      	add	r1, sp, #8
 8004c7c:	f000 f866 	bl	8004d4c <_svfiprintf_r>
 8004c80:	9b02      	ldr	r3, [sp, #8]
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	b01c      	add	sp, #112	; 0x70
 8004c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c8c:	b003      	add	sp, #12
 8004c8e:	4770      	bx	lr
 8004c90:	20000010 	.word	0x20000010
 8004c94:	ffff0208 	.word	0xffff0208

08004c98 <__ssputs_r>:
 8004c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c9c:	688e      	ldr	r6, [r1, #8]
 8004c9e:	429e      	cmp	r6, r3
 8004ca0:	4682      	mov	sl, r0
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	4690      	mov	r8, r2
 8004ca6:	4699      	mov	r9, r3
 8004ca8:	d837      	bhi.n	8004d1a <__ssputs_r+0x82>
 8004caa:	898a      	ldrh	r2, [r1, #12]
 8004cac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cb0:	d031      	beq.n	8004d16 <__ssputs_r+0x7e>
 8004cb2:	6825      	ldr	r5, [r4, #0]
 8004cb4:	6909      	ldr	r1, [r1, #16]
 8004cb6:	1a6f      	subs	r7, r5, r1
 8004cb8:	6965      	ldr	r5, [r4, #20]
 8004cba:	2302      	movs	r3, #2
 8004cbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cc0:	fb95 f5f3 	sdiv	r5, r5, r3
 8004cc4:	f109 0301 	add.w	r3, r9, #1
 8004cc8:	443b      	add	r3, r7
 8004cca:	429d      	cmp	r5, r3
 8004ccc:	bf38      	it	cc
 8004cce:	461d      	movcc	r5, r3
 8004cd0:	0553      	lsls	r3, r2, #21
 8004cd2:	d530      	bpl.n	8004d36 <__ssputs_r+0x9e>
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	f000 fb21 	bl	800531c <_malloc_r>
 8004cda:	4606      	mov	r6, r0
 8004cdc:	b950      	cbnz	r0, 8004cf4 <__ssputs_r+0x5c>
 8004cde:	230c      	movs	r3, #12
 8004ce0:	f8ca 3000 	str.w	r3, [sl]
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cea:	81a3      	strh	r3, [r4, #12]
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf4:	463a      	mov	r2, r7
 8004cf6:	6921      	ldr	r1, [r4, #16]
 8004cf8:	f7ff ff9a 	bl	8004c30 <memcpy>
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d06:	81a3      	strh	r3, [r4, #12]
 8004d08:	6126      	str	r6, [r4, #16]
 8004d0a:	6165      	str	r5, [r4, #20]
 8004d0c:	443e      	add	r6, r7
 8004d0e:	1bed      	subs	r5, r5, r7
 8004d10:	6026      	str	r6, [r4, #0]
 8004d12:	60a5      	str	r5, [r4, #8]
 8004d14:	464e      	mov	r6, r9
 8004d16:	454e      	cmp	r6, r9
 8004d18:	d900      	bls.n	8004d1c <__ssputs_r+0x84>
 8004d1a:	464e      	mov	r6, r9
 8004d1c:	4632      	mov	r2, r6
 8004d1e:	4641      	mov	r1, r8
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	f000 fa93 	bl	800524c <memmove>
 8004d26:	68a3      	ldr	r3, [r4, #8]
 8004d28:	1b9b      	subs	r3, r3, r6
 8004d2a:	60a3      	str	r3, [r4, #8]
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	441e      	add	r6, r3
 8004d30:	6026      	str	r6, [r4, #0]
 8004d32:	2000      	movs	r0, #0
 8004d34:	e7dc      	b.n	8004cf0 <__ssputs_r+0x58>
 8004d36:	462a      	mov	r2, r5
 8004d38:	f000 fb4a 	bl	80053d0 <_realloc_r>
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d1e2      	bne.n	8004d08 <__ssputs_r+0x70>
 8004d42:	6921      	ldr	r1, [r4, #16]
 8004d44:	4650      	mov	r0, sl
 8004d46:	f000 fa9b 	bl	8005280 <_free_r>
 8004d4a:	e7c8      	b.n	8004cde <__ssputs_r+0x46>

08004d4c <_svfiprintf_r>:
 8004d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d50:	461d      	mov	r5, r3
 8004d52:	898b      	ldrh	r3, [r1, #12]
 8004d54:	061f      	lsls	r7, r3, #24
 8004d56:	b09d      	sub	sp, #116	; 0x74
 8004d58:	4680      	mov	r8, r0
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	4616      	mov	r6, r2
 8004d5e:	d50f      	bpl.n	8004d80 <_svfiprintf_r+0x34>
 8004d60:	690b      	ldr	r3, [r1, #16]
 8004d62:	b96b      	cbnz	r3, 8004d80 <_svfiprintf_r+0x34>
 8004d64:	2140      	movs	r1, #64	; 0x40
 8004d66:	f000 fad9 	bl	800531c <_malloc_r>
 8004d6a:	6020      	str	r0, [r4, #0]
 8004d6c:	6120      	str	r0, [r4, #16]
 8004d6e:	b928      	cbnz	r0, 8004d7c <_svfiprintf_r+0x30>
 8004d70:	230c      	movs	r3, #12
 8004d72:	f8c8 3000 	str.w	r3, [r8]
 8004d76:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7a:	e0c8      	b.n	8004f0e <_svfiprintf_r+0x1c2>
 8004d7c:	2340      	movs	r3, #64	; 0x40
 8004d7e:	6163      	str	r3, [r4, #20]
 8004d80:	2300      	movs	r3, #0
 8004d82:	9309      	str	r3, [sp, #36]	; 0x24
 8004d84:	2320      	movs	r3, #32
 8004d86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d8a:	2330      	movs	r3, #48	; 0x30
 8004d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d90:	9503      	str	r5, [sp, #12]
 8004d92:	f04f 0b01 	mov.w	fp, #1
 8004d96:	4637      	mov	r7, r6
 8004d98:	463d      	mov	r5, r7
 8004d9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d9e:	b10b      	cbz	r3, 8004da4 <_svfiprintf_r+0x58>
 8004da0:	2b25      	cmp	r3, #37	; 0x25
 8004da2:	d13e      	bne.n	8004e22 <_svfiprintf_r+0xd6>
 8004da4:	ebb7 0a06 	subs.w	sl, r7, r6
 8004da8:	d00b      	beq.n	8004dc2 <_svfiprintf_r+0x76>
 8004daa:	4653      	mov	r3, sl
 8004dac:	4632      	mov	r2, r6
 8004dae:	4621      	mov	r1, r4
 8004db0:	4640      	mov	r0, r8
 8004db2:	f7ff ff71 	bl	8004c98 <__ssputs_r>
 8004db6:	3001      	adds	r0, #1
 8004db8:	f000 80a4 	beq.w	8004f04 <_svfiprintf_r+0x1b8>
 8004dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dbe:	4453      	add	r3, sl
 8004dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc2:	783b      	ldrb	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 809d 	beq.w	8004f04 <_svfiprintf_r+0x1b8>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dd4:	9304      	str	r3, [sp, #16]
 8004dd6:	9307      	str	r3, [sp, #28]
 8004dd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ddc:	931a      	str	r3, [sp, #104]	; 0x68
 8004dde:	462f      	mov	r7, r5
 8004de0:	2205      	movs	r2, #5
 8004de2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004de6:	4850      	ldr	r0, [pc, #320]	; (8004f28 <_svfiprintf_r+0x1dc>)
 8004de8:	f7fb f9fa 	bl	80001e0 <memchr>
 8004dec:	9b04      	ldr	r3, [sp, #16]
 8004dee:	b9d0      	cbnz	r0, 8004e26 <_svfiprintf_r+0xda>
 8004df0:	06d9      	lsls	r1, r3, #27
 8004df2:	bf44      	itt	mi
 8004df4:	2220      	movmi	r2, #32
 8004df6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004dfa:	071a      	lsls	r2, r3, #28
 8004dfc:	bf44      	itt	mi
 8004dfe:	222b      	movmi	r2, #43	; 0x2b
 8004e00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e04:	782a      	ldrb	r2, [r5, #0]
 8004e06:	2a2a      	cmp	r2, #42	; 0x2a
 8004e08:	d015      	beq.n	8004e36 <_svfiprintf_r+0xea>
 8004e0a:	9a07      	ldr	r2, [sp, #28]
 8004e0c:	462f      	mov	r7, r5
 8004e0e:	2000      	movs	r0, #0
 8004e10:	250a      	movs	r5, #10
 8004e12:	4639      	mov	r1, r7
 8004e14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e18:	3b30      	subs	r3, #48	; 0x30
 8004e1a:	2b09      	cmp	r3, #9
 8004e1c:	d94d      	bls.n	8004eba <_svfiprintf_r+0x16e>
 8004e1e:	b1b8      	cbz	r0, 8004e50 <_svfiprintf_r+0x104>
 8004e20:	e00f      	b.n	8004e42 <_svfiprintf_r+0xf6>
 8004e22:	462f      	mov	r7, r5
 8004e24:	e7b8      	b.n	8004d98 <_svfiprintf_r+0x4c>
 8004e26:	4a40      	ldr	r2, [pc, #256]	; (8004f28 <_svfiprintf_r+0x1dc>)
 8004e28:	1a80      	subs	r0, r0, r2
 8004e2a:	fa0b f000 	lsl.w	r0, fp, r0
 8004e2e:	4318      	orrs	r0, r3
 8004e30:	9004      	str	r0, [sp, #16]
 8004e32:	463d      	mov	r5, r7
 8004e34:	e7d3      	b.n	8004dde <_svfiprintf_r+0x92>
 8004e36:	9a03      	ldr	r2, [sp, #12]
 8004e38:	1d11      	adds	r1, r2, #4
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	9103      	str	r1, [sp, #12]
 8004e3e:	2a00      	cmp	r2, #0
 8004e40:	db01      	blt.n	8004e46 <_svfiprintf_r+0xfa>
 8004e42:	9207      	str	r2, [sp, #28]
 8004e44:	e004      	b.n	8004e50 <_svfiprintf_r+0x104>
 8004e46:	4252      	negs	r2, r2
 8004e48:	f043 0302 	orr.w	r3, r3, #2
 8004e4c:	9207      	str	r2, [sp, #28]
 8004e4e:	9304      	str	r3, [sp, #16]
 8004e50:	783b      	ldrb	r3, [r7, #0]
 8004e52:	2b2e      	cmp	r3, #46	; 0x2e
 8004e54:	d10c      	bne.n	8004e70 <_svfiprintf_r+0x124>
 8004e56:	787b      	ldrb	r3, [r7, #1]
 8004e58:	2b2a      	cmp	r3, #42	; 0x2a
 8004e5a:	d133      	bne.n	8004ec4 <_svfiprintf_r+0x178>
 8004e5c:	9b03      	ldr	r3, [sp, #12]
 8004e5e:	1d1a      	adds	r2, r3, #4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	9203      	str	r2, [sp, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bfb8      	it	lt
 8004e68:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e6c:	3702      	adds	r7, #2
 8004e6e:	9305      	str	r3, [sp, #20]
 8004e70:	4d2e      	ldr	r5, [pc, #184]	; (8004f2c <_svfiprintf_r+0x1e0>)
 8004e72:	7839      	ldrb	r1, [r7, #0]
 8004e74:	2203      	movs	r2, #3
 8004e76:	4628      	mov	r0, r5
 8004e78:	f7fb f9b2 	bl	80001e0 <memchr>
 8004e7c:	b138      	cbz	r0, 8004e8e <_svfiprintf_r+0x142>
 8004e7e:	2340      	movs	r3, #64	; 0x40
 8004e80:	1b40      	subs	r0, r0, r5
 8004e82:	fa03 f000 	lsl.w	r0, r3, r0
 8004e86:	9b04      	ldr	r3, [sp, #16]
 8004e88:	4303      	orrs	r3, r0
 8004e8a:	3701      	adds	r7, #1
 8004e8c:	9304      	str	r3, [sp, #16]
 8004e8e:	7839      	ldrb	r1, [r7, #0]
 8004e90:	4827      	ldr	r0, [pc, #156]	; (8004f30 <_svfiprintf_r+0x1e4>)
 8004e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e96:	2206      	movs	r2, #6
 8004e98:	1c7e      	adds	r6, r7, #1
 8004e9a:	f7fb f9a1 	bl	80001e0 <memchr>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d038      	beq.n	8004f14 <_svfiprintf_r+0x1c8>
 8004ea2:	4b24      	ldr	r3, [pc, #144]	; (8004f34 <_svfiprintf_r+0x1e8>)
 8004ea4:	bb13      	cbnz	r3, 8004eec <_svfiprintf_r+0x1a0>
 8004ea6:	9b03      	ldr	r3, [sp, #12]
 8004ea8:	3307      	adds	r3, #7
 8004eaa:	f023 0307 	bic.w	r3, r3, #7
 8004eae:	3308      	adds	r3, #8
 8004eb0:	9303      	str	r3, [sp, #12]
 8004eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb4:	444b      	add	r3, r9
 8004eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb8:	e76d      	b.n	8004d96 <_svfiprintf_r+0x4a>
 8004eba:	fb05 3202 	mla	r2, r5, r2, r3
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	460f      	mov	r7, r1
 8004ec2:	e7a6      	b.n	8004e12 <_svfiprintf_r+0xc6>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	3701      	adds	r7, #1
 8004ec8:	9305      	str	r3, [sp, #20]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	250a      	movs	r5, #10
 8004ece:	4638      	mov	r0, r7
 8004ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ed4:	3a30      	subs	r2, #48	; 0x30
 8004ed6:	2a09      	cmp	r2, #9
 8004ed8:	d903      	bls.n	8004ee2 <_svfiprintf_r+0x196>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0c8      	beq.n	8004e70 <_svfiprintf_r+0x124>
 8004ede:	9105      	str	r1, [sp, #20]
 8004ee0:	e7c6      	b.n	8004e70 <_svfiprintf_r+0x124>
 8004ee2:	fb05 2101 	mla	r1, r5, r1, r2
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4607      	mov	r7, r0
 8004eea:	e7f0      	b.n	8004ece <_svfiprintf_r+0x182>
 8004eec:	ab03      	add	r3, sp, #12
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	4622      	mov	r2, r4
 8004ef2:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <_svfiprintf_r+0x1ec>)
 8004ef4:	a904      	add	r1, sp, #16
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	f3af 8000 	nop.w
 8004efc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f00:	4681      	mov	r9, r0
 8004f02:	d1d6      	bne.n	8004eb2 <_svfiprintf_r+0x166>
 8004f04:	89a3      	ldrh	r3, [r4, #12]
 8004f06:	065b      	lsls	r3, r3, #25
 8004f08:	f53f af35 	bmi.w	8004d76 <_svfiprintf_r+0x2a>
 8004f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f0e:	b01d      	add	sp, #116	; 0x74
 8004f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f14:	ab03      	add	r3, sp, #12
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	4622      	mov	r2, r4
 8004f1a:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <_svfiprintf_r+0x1ec>)
 8004f1c:	a904      	add	r1, sp, #16
 8004f1e:	4640      	mov	r0, r8
 8004f20:	f000 f882 	bl	8005028 <_printf_i>
 8004f24:	e7ea      	b.n	8004efc <_svfiprintf_r+0x1b0>
 8004f26:	bf00      	nop
 8004f28:	08005538 	.word	0x08005538
 8004f2c:	0800553e 	.word	0x0800553e
 8004f30:	08005542 	.word	0x08005542
 8004f34:	00000000 	.word	0x00000000
 8004f38:	08004c99 	.word	0x08004c99

08004f3c <_printf_common>:
 8004f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	4691      	mov	r9, r2
 8004f42:	461f      	mov	r7, r3
 8004f44:	688a      	ldr	r2, [r1, #8]
 8004f46:	690b      	ldr	r3, [r1, #16]
 8004f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	bfb8      	it	lt
 8004f50:	4613      	movlt	r3, r2
 8004f52:	f8c9 3000 	str.w	r3, [r9]
 8004f56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f5a:	4606      	mov	r6, r0
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	b112      	cbz	r2, 8004f66 <_printf_common+0x2a>
 8004f60:	3301      	adds	r3, #1
 8004f62:	f8c9 3000 	str.w	r3, [r9]
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	0699      	lsls	r1, r3, #26
 8004f6a:	bf42      	ittt	mi
 8004f6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f70:	3302      	addmi	r3, #2
 8004f72:	f8c9 3000 	strmi.w	r3, [r9]
 8004f76:	6825      	ldr	r5, [r4, #0]
 8004f78:	f015 0506 	ands.w	r5, r5, #6
 8004f7c:	d107      	bne.n	8004f8e <_printf_common+0x52>
 8004f7e:	f104 0a19 	add.w	sl, r4, #25
 8004f82:	68e3      	ldr	r3, [r4, #12]
 8004f84:	f8d9 2000 	ldr.w	r2, [r9]
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	42ab      	cmp	r3, r5
 8004f8c:	dc28      	bgt.n	8004fe0 <_printf_common+0xa4>
 8004f8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f92:	6822      	ldr	r2, [r4, #0]
 8004f94:	3300      	adds	r3, #0
 8004f96:	bf18      	it	ne
 8004f98:	2301      	movne	r3, #1
 8004f9a:	0692      	lsls	r2, r2, #26
 8004f9c:	d42d      	bmi.n	8004ffa <_printf_common+0xbe>
 8004f9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fa2:	4639      	mov	r1, r7
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	47c0      	blx	r8
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d020      	beq.n	8004fee <_printf_common+0xb2>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	68e5      	ldr	r5, [r4, #12]
 8004fb0:	f8d9 2000 	ldr.w	r2, [r9]
 8004fb4:	f003 0306 	and.w	r3, r3, #6
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	bf08      	it	eq
 8004fbc:	1aad      	subeq	r5, r5, r2
 8004fbe:	68a3      	ldr	r3, [r4, #8]
 8004fc0:	6922      	ldr	r2, [r4, #16]
 8004fc2:	bf0c      	ite	eq
 8004fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fc8:	2500      	movne	r5, #0
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	bfc4      	itt	gt
 8004fce:	1a9b      	subgt	r3, r3, r2
 8004fd0:	18ed      	addgt	r5, r5, r3
 8004fd2:	f04f 0900 	mov.w	r9, #0
 8004fd6:	341a      	adds	r4, #26
 8004fd8:	454d      	cmp	r5, r9
 8004fda:	d11a      	bne.n	8005012 <_printf_common+0xd6>
 8004fdc:	2000      	movs	r0, #0
 8004fde:	e008      	b.n	8004ff2 <_printf_common+0xb6>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4652      	mov	r2, sl
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	47c0      	blx	r8
 8004fea:	3001      	adds	r0, #1
 8004fec:	d103      	bne.n	8004ff6 <_printf_common+0xba>
 8004fee:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff6:	3501      	adds	r5, #1
 8004ff8:	e7c3      	b.n	8004f82 <_printf_common+0x46>
 8004ffa:	18e1      	adds	r1, r4, r3
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	2030      	movs	r0, #48	; 0x30
 8005000:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005004:	4422      	add	r2, r4
 8005006:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800500a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800500e:	3302      	adds	r3, #2
 8005010:	e7c5      	b.n	8004f9e <_printf_common+0x62>
 8005012:	2301      	movs	r3, #1
 8005014:	4622      	mov	r2, r4
 8005016:	4639      	mov	r1, r7
 8005018:	4630      	mov	r0, r6
 800501a:	47c0      	blx	r8
 800501c:	3001      	adds	r0, #1
 800501e:	d0e6      	beq.n	8004fee <_printf_common+0xb2>
 8005020:	f109 0901 	add.w	r9, r9, #1
 8005024:	e7d8      	b.n	8004fd8 <_printf_common+0x9c>
	...

08005028 <_printf_i>:
 8005028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800502c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005030:	460c      	mov	r4, r1
 8005032:	7e09      	ldrb	r1, [r1, #24]
 8005034:	b085      	sub	sp, #20
 8005036:	296e      	cmp	r1, #110	; 0x6e
 8005038:	4617      	mov	r7, r2
 800503a:	4606      	mov	r6, r0
 800503c:	4698      	mov	r8, r3
 800503e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005040:	f000 80b3 	beq.w	80051aa <_printf_i+0x182>
 8005044:	d822      	bhi.n	800508c <_printf_i+0x64>
 8005046:	2963      	cmp	r1, #99	; 0x63
 8005048:	d036      	beq.n	80050b8 <_printf_i+0x90>
 800504a:	d80a      	bhi.n	8005062 <_printf_i+0x3a>
 800504c:	2900      	cmp	r1, #0
 800504e:	f000 80b9 	beq.w	80051c4 <_printf_i+0x19c>
 8005052:	2958      	cmp	r1, #88	; 0x58
 8005054:	f000 8083 	beq.w	800515e <_printf_i+0x136>
 8005058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800505c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005060:	e032      	b.n	80050c8 <_printf_i+0xa0>
 8005062:	2964      	cmp	r1, #100	; 0x64
 8005064:	d001      	beq.n	800506a <_printf_i+0x42>
 8005066:	2969      	cmp	r1, #105	; 0x69
 8005068:	d1f6      	bne.n	8005058 <_printf_i+0x30>
 800506a:	6820      	ldr	r0, [r4, #0]
 800506c:	6813      	ldr	r3, [r2, #0]
 800506e:	0605      	lsls	r5, r0, #24
 8005070:	f103 0104 	add.w	r1, r3, #4
 8005074:	d52a      	bpl.n	80050cc <_printf_i+0xa4>
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6011      	str	r1, [r2, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	da03      	bge.n	8005086 <_printf_i+0x5e>
 800507e:	222d      	movs	r2, #45	; 0x2d
 8005080:	425b      	negs	r3, r3
 8005082:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005086:	486f      	ldr	r0, [pc, #444]	; (8005244 <_printf_i+0x21c>)
 8005088:	220a      	movs	r2, #10
 800508a:	e039      	b.n	8005100 <_printf_i+0xd8>
 800508c:	2973      	cmp	r1, #115	; 0x73
 800508e:	f000 809d 	beq.w	80051cc <_printf_i+0x1a4>
 8005092:	d808      	bhi.n	80050a6 <_printf_i+0x7e>
 8005094:	296f      	cmp	r1, #111	; 0x6f
 8005096:	d020      	beq.n	80050da <_printf_i+0xb2>
 8005098:	2970      	cmp	r1, #112	; 0x70
 800509a:	d1dd      	bne.n	8005058 <_printf_i+0x30>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	f043 0320 	orr.w	r3, r3, #32
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	e003      	b.n	80050ae <_printf_i+0x86>
 80050a6:	2975      	cmp	r1, #117	; 0x75
 80050a8:	d017      	beq.n	80050da <_printf_i+0xb2>
 80050aa:	2978      	cmp	r1, #120	; 0x78
 80050ac:	d1d4      	bne.n	8005058 <_printf_i+0x30>
 80050ae:	2378      	movs	r3, #120	; 0x78
 80050b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050b4:	4864      	ldr	r0, [pc, #400]	; (8005248 <_printf_i+0x220>)
 80050b6:	e055      	b.n	8005164 <_printf_i+0x13c>
 80050b8:	6813      	ldr	r3, [r2, #0]
 80050ba:	1d19      	adds	r1, r3, #4
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6011      	str	r1, [r2, #0]
 80050c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050c8:	2301      	movs	r3, #1
 80050ca:	e08c      	b.n	80051e6 <_printf_i+0x1be>
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6011      	str	r1, [r2, #0]
 80050d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050d4:	bf18      	it	ne
 80050d6:	b21b      	sxthne	r3, r3
 80050d8:	e7cf      	b.n	800507a <_printf_i+0x52>
 80050da:	6813      	ldr	r3, [r2, #0]
 80050dc:	6825      	ldr	r5, [r4, #0]
 80050de:	1d18      	adds	r0, r3, #4
 80050e0:	6010      	str	r0, [r2, #0]
 80050e2:	0628      	lsls	r0, r5, #24
 80050e4:	d501      	bpl.n	80050ea <_printf_i+0xc2>
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	e002      	b.n	80050f0 <_printf_i+0xc8>
 80050ea:	0668      	lsls	r0, r5, #25
 80050ec:	d5fb      	bpl.n	80050e6 <_printf_i+0xbe>
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	4854      	ldr	r0, [pc, #336]	; (8005244 <_printf_i+0x21c>)
 80050f2:	296f      	cmp	r1, #111	; 0x6f
 80050f4:	bf14      	ite	ne
 80050f6:	220a      	movne	r2, #10
 80050f8:	2208      	moveq	r2, #8
 80050fa:	2100      	movs	r1, #0
 80050fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005100:	6865      	ldr	r5, [r4, #4]
 8005102:	60a5      	str	r5, [r4, #8]
 8005104:	2d00      	cmp	r5, #0
 8005106:	f2c0 8095 	blt.w	8005234 <_printf_i+0x20c>
 800510a:	6821      	ldr	r1, [r4, #0]
 800510c:	f021 0104 	bic.w	r1, r1, #4
 8005110:	6021      	str	r1, [r4, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d13d      	bne.n	8005192 <_printf_i+0x16a>
 8005116:	2d00      	cmp	r5, #0
 8005118:	f040 808e 	bne.w	8005238 <_printf_i+0x210>
 800511c:	4665      	mov	r5, ip
 800511e:	2a08      	cmp	r2, #8
 8005120:	d10b      	bne.n	800513a <_printf_i+0x112>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	07db      	lsls	r3, r3, #31
 8005126:	d508      	bpl.n	800513a <_printf_i+0x112>
 8005128:	6923      	ldr	r3, [r4, #16]
 800512a:	6862      	ldr	r2, [r4, #4]
 800512c:	429a      	cmp	r2, r3
 800512e:	bfde      	ittt	le
 8005130:	2330      	movle	r3, #48	; 0x30
 8005132:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005136:	f105 35ff 	addle.w	r5, r5, #4294967295
 800513a:	ebac 0305 	sub.w	r3, ip, r5
 800513e:	6123      	str	r3, [r4, #16]
 8005140:	f8cd 8000 	str.w	r8, [sp]
 8005144:	463b      	mov	r3, r7
 8005146:	aa03      	add	r2, sp, #12
 8005148:	4621      	mov	r1, r4
 800514a:	4630      	mov	r0, r6
 800514c:	f7ff fef6 	bl	8004f3c <_printf_common>
 8005150:	3001      	adds	r0, #1
 8005152:	d14d      	bne.n	80051f0 <_printf_i+0x1c8>
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	b005      	add	sp, #20
 800515a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800515e:	4839      	ldr	r0, [pc, #228]	; (8005244 <_printf_i+0x21c>)
 8005160:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005164:	6813      	ldr	r3, [r2, #0]
 8005166:	6821      	ldr	r1, [r4, #0]
 8005168:	1d1d      	adds	r5, r3, #4
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6015      	str	r5, [r2, #0]
 800516e:	060a      	lsls	r2, r1, #24
 8005170:	d50b      	bpl.n	800518a <_printf_i+0x162>
 8005172:	07ca      	lsls	r2, r1, #31
 8005174:	bf44      	itt	mi
 8005176:	f041 0120 	orrmi.w	r1, r1, #32
 800517a:	6021      	strmi	r1, [r4, #0]
 800517c:	b91b      	cbnz	r3, 8005186 <_printf_i+0x15e>
 800517e:	6822      	ldr	r2, [r4, #0]
 8005180:	f022 0220 	bic.w	r2, r2, #32
 8005184:	6022      	str	r2, [r4, #0]
 8005186:	2210      	movs	r2, #16
 8005188:	e7b7      	b.n	80050fa <_printf_i+0xd2>
 800518a:	064d      	lsls	r5, r1, #25
 800518c:	bf48      	it	mi
 800518e:	b29b      	uxthmi	r3, r3
 8005190:	e7ef      	b.n	8005172 <_printf_i+0x14a>
 8005192:	4665      	mov	r5, ip
 8005194:	fbb3 f1f2 	udiv	r1, r3, r2
 8005198:	fb02 3311 	mls	r3, r2, r1, r3
 800519c:	5cc3      	ldrb	r3, [r0, r3]
 800519e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051a2:	460b      	mov	r3, r1
 80051a4:	2900      	cmp	r1, #0
 80051a6:	d1f5      	bne.n	8005194 <_printf_i+0x16c>
 80051a8:	e7b9      	b.n	800511e <_printf_i+0xf6>
 80051aa:	6813      	ldr	r3, [r2, #0]
 80051ac:	6825      	ldr	r5, [r4, #0]
 80051ae:	6961      	ldr	r1, [r4, #20]
 80051b0:	1d18      	adds	r0, r3, #4
 80051b2:	6010      	str	r0, [r2, #0]
 80051b4:	0628      	lsls	r0, r5, #24
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	d501      	bpl.n	80051be <_printf_i+0x196>
 80051ba:	6019      	str	r1, [r3, #0]
 80051bc:	e002      	b.n	80051c4 <_printf_i+0x19c>
 80051be:	066a      	lsls	r2, r5, #25
 80051c0:	d5fb      	bpl.n	80051ba <_printf_i+0x192>
 80051c2:	8019      	strh	r1, [r3, #0]
 80051c4:	2300      	movs	r3, #0
 80051c6:	6123      	str	r3, [r4, #16]
 80051c8:	4665      	mov	r5, ip
 80051ca:	e7b9      	b.n	8005140 <_printf_i+0x118>
 80051cc:	6813      	ldr	r3, [r2, #0]
 80051ce:	1d19      	adds	r1, r3, #4
 80051d0:	6011      	str	r1, [r2, #0]
 80051d2:	681d      	ldr	r5, [r3, #0]
 80051d4:	6862      	ldr	r2, [r4, #4]
 80051d6:	2100      	movs	r1, #0
 80051d8:	4628      	mov	r0, r5
 80051da:	f7fb f801 	bl	80001e0 <memchr>
 80051de:	b108      	cbz	r0, 80051e4 <_printf_i+0x1bc>
 80051e0:	1b40      	subs	r0, r0, r5
 80051e2:	6060      	str	r0, [r4, #4]
 80051e4:	6863      	ldr	r3, [r4, #4]
 80051e6:	6123      	str	r3, [r4, #16]
 80051e8:	2300      	movs	r3, #0
 80051ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ee:	e7a7      	b.n	8005140 <_printf_i+0x118>
 80051f0:	6923      	ldr	r3, [r4, #16]
 80051f2:	462a      	mov	r2, r5
 80051f4:	4639      	mov	r1, r7
 80051f6:	4630      	mov	r0, r6
 80051f8:	47c0      	blx	r8
 80051fa:	3001      	adds	r0, #1
 80051fc:	d0aa      	beq.n	8005154 <_printf_i+0x12c>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	079b      	lsls	r3, r3, #30
 8005202:	d413      	bmi.n	800522c <_printf_i+0x204>
 8005204:	68e0      	ldr	r0, [r4, #12]
 8005206:	9b03      	ldr	r3, [sp, #12]
 8005208:	4298      	cmp	r0, r3
 800520a:	bfb8      	it	lt
 800520c:	4618      	movlt	r0, r3
 800520e:	e7a3      	b.n	8005158 <_printf_i+0x130>
 8005210:	2301      	movs	r3, #1
 8005212:	464a      	mov	r2, r9
 8005214:	4639      	mov	r1, r7
 8005216:	4630      	mov	r0, r6
 8005218:	47c0      	blx	r8
 800521a:	3001      	adds	r0, #1
 800521c:	d09a      	beq.n	8005154 <_printf_i+0x12c>
 800521e:	3501      	adds	r5, #1
 8005220:	68e3      	ldr	r3, [r4, #12]
 8005222:	9a03      	ldr	r2, [sp, #12]
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	42ab      	cmp	r3, r5
 8005228:	dcf2      	bgt.n	8005210 <_printf_i+0x1e8>
 800522a:	e7eb      	b.n	8005204 <_printf_i+0x1dc>
 800522c:	2500      	movs	r5, #0
 800522e:	f104 0919 	add.w	r9, r4, #25
 8005232:	e7f5      	b.n	8005220 <_printf_i+0x1f8>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1ac      	bne.n	8005192 <_printf_i+0x16a>
 8005238:	7803      	ldrb	r3, [r0, #0]
 800523a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800523e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005242:	e76c      	b.n	800511e <_printf_i+0xf6>
 8005244:	08005549 	.word	0x08005549
 8005248:	0800555a 	.word	0x0800555a

0800524c <memmove>:
 800524c:	4288      	cmp	r0, r1
 800524e:	b510      	push	{r4, lr}
 8005250:	eb01 0302 	add.w	r3, r1, r2
 8005254:	d807      	bhi.n	8005266 <memmove+0x1a>
 8005256:	1e42      	subs	r2, r0, #1
 8005258:	4299      	cmp	r1, r3
 800525a:	d00a      	beq.n	8005272 <memmove+0x26>
 800525c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005260:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005264:	e7f8      	b.n	8005258 <memmove+0xc>
 8005266:	4283      	cmp	r3, r0
 8005268:	d9f5      	bls.n	8005256 <memmove+0xa>
 800526a:	1881      	adds	r1, r0, r2
 800526c:	1ad2      	subs	r2, r2, r3
 800526e:	42d3      	cmn	r3, r2
 8005270:	d100      	bne.n	8005274 <memmove+0x28>
 8005272:	bd10      	pop	{r4, pc}
 8005274:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005278:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800527c:	e7f7      	b.n	800526e <memmove+0x22>
	...

08005280 <_free_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4605      	mov	r5, r0
 8005284:	2900      	cmp	r1, #0
 8005286:	d045      	beq.n	8005314 <_free_r+0x94>
 8005288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800528c:	1f0c      	subs	r4, r1, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	bfb8      	it	lt
 8005292:	18e4      	addlt	r4, r4, r3
 8005294:	f000 f8d2 	bl	800543c <__malloc_lock>
 8005298:	4a1f      	ldr	r2, [pc, #124]	; (8005318 <_free_r+0x98>)
 800529a:	6813      	ldr	r3, [r2, #0]
 800529c:	4610      	mov	r0, r2
 800529e:	b933      	cbnz	r3, 80052ae <_free_r+0x2e>
 80052a0:	6063      	str	r3, [r4, #4]
 80052a2:	6014      	str	r4, [r2, #0]
 80052a4:	4628      	mov	r0, r5
 80052a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052aa:	f000 b8c8 	b.w	800543e <__malloc_unlock>
 80052ae:	42a3      	cmp	r3, r4
 80052b0:	d90c      	bls.n	80052cc <_free_r+0x4c>
 80052b2:	6821      	ldr	r1, [r4, #0]
 80052b4:	1862      	adds	r2, r4, r1
 80052b6:	4293      	cmp	r3, r2
 80052b8:	bf04      	itt	eq
 80052ba:	681a      	ldreq	r2, [r3, #0]
 80052bc:	685b      	ldreq	r3, [r3, #4]
 80052be:	6063      	str	r3, [r4, #4]
 80052c0:	bf04      	itt	eq
 80052c2:	1852      	addeq	r2, r2, r1
 80052c4:	6022      	streq	r2, [r4, #0]
 80052c6:	6004      	str	r4, [r0, #0]
 80052c8:	e7ec      	b.n	80052a4 <_free_r+0x24>
 80052ca:	4613      	mov	r3, r2
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	b10a      	cbz	r2, 80052d4 <_free_r+0x54>
 80052d0:	42a2      	cmp	r2, r4
 80052d2:	d9fa      	bls.n	80052ca <_free_r+0x4a>
 80052d4:	6819      	ldr	r1, [r3, #0]
 80052d6:	1858      	adds	r0, r3, r1
 80052d8:	42a0      	cmp	r0, r4
 80052da:	d10b      	bne.n	80052f4 <_free_r+0x74>
 80052dc:	6820      	ldr	r0, [r4, #0]
 80052de:	4401      	add	r1, r0
 80052e0:	1858      	adds	r0, r3, r1
 80052e2:	4282      	cmp	r2, r0
 80052e4:	6019      	str	r1, [r3, #0]
 80052e6:	d1dd      	bne.n	80052a4 <_free_r+0x24>
 80052e8:	6810      	ldr	r0, [r2, #0]
 80052ea:	6852      	ldr	r2, [r2, #4]
 80052ec:	605a      	str	r2, [r3, #4]
 80052ee:	4401      	add	r1, r0
 80052f0:	6019      	str	r1, [r3, #0]
 80052f2:	e7d7      	b.n	80052a4 <_free_r+0x24>
 80052f4:	d902      	bls.n	80052fc <_free_r+0x7c>
 80052f6:	230c      	movs	r3, #12
 80052f8:	602b      	str	r3, [r5, #0]
 80052fa:	e7d3      	b.n	80052a4 <_free_r+0x24>
 80052fc:	6820      	ldr	r0, [r4, #0]
 80052fe:	1821      	adds	r1, r4, r0
 8005300:	428a      	cmp	r2, r1
 8005302:	bf04      	itt	eq
 8005304:	6811      	ldreq	r1, [r2, #0]
 8005306:	6852      	ldreq	r2, [r2, #4]
 8005308:	6062      	str	r2, [r4, #4]
 800530a:	bf04      	itt	eq
 800530c:	1809      	addeq	r1, r1, r0
 800530e:	6021      	streq	r1, [r4, #0]
 8005310:	605c      	str	r4, [r3, #4]
 8005312:	e7c7      	b.n	80052a4 <_free_r+0x24>
 8005314:	bd38      	pop	{r3, r4, r5, pc}
 8005316:	bf00      	nop
 8005318:	200040a0 	.word	0x200040a0

0800531c <_malloc_r>:
 800531c:	b570      	push	{r4, r5, r6, lr}
 800531e:	1ccd      	adds	r5, r1, #3
 8005320:	f025 0503 	bic.w	r5, r5, #3
 8005324:	3508      	adds	r5, #8
 8005326:	2d0c      	cmp	r5, #12
 8005328:	bf38      	it	cc
 800532a:	250c      	movcc	r5, #12
 800532c:	2d00      	cmp	r5, #0
 800532e:	4606      	mov	r6, r0
 8005330:	db01      	blt.n	8005336 <_malloc_r+0x1a>
 8005332:	42a9      	cmp	r1, r5
 8005334:	d903      	bls.n	800533e <_malloc_r+0x22>
 8005336:	230c      	movs	r3, #12
 8005338:	6033      	str	r3, [r6, #0]
 800533a:	2000      	movs	r0, #0
 800533c:	bd70      	pop	{r4, r5, r6, pc}
 800533e:	f000 f87d 	bl	800543c <__malloc_lock>
 8005342:	4a21      	ldr	r2, [pc, #132]	; (80053c8 <_malloc_r+0xac>)
 8005344:	6814      	ldr	r4, [r2, #0]
 8005346:	4621      	mov	r1, r4
 8005348:	b991      	cbnz	r1, 8005370 <_malloc_r+0x54>
 800534a:	4c20      	ldr	r4, [pc, #128]	; (80053cc <_malloc_r+0xb0>)
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	b91b      	cbnz	r3, 8005358 <_malloc_r+0x3c>
 8005350:	4630      	mov	r0, r6
 8005352:	f000 f863 	bl	800541c <_sbrk_r>
 8005356:	6020      	str	r0, [r4, #0]
 8005358:	4629      	mov	r1, r5
 800535a:	4630      	mov	r0, r6
 800535c:	f000 f85e 	bl	800541c <_sbrk_r>
 8005360:	1c43      	adds	r3, r0, #1
 8005362:	d124      	bne.n	80053ae <_malloc_r+0x92>
 8005364:	230c      	movs	r3, #12
 8005366:	6033      	str	r3, [r6, #0]
 8005368:	4630      	mov	r0, r6
 800536a:	f000 f868 	bl	800543e <__malloc_unlock>
 800536e:	e7e4      	b.n	800533a <_malloc_r+0x1e>
 8005370:	680b      	ldr	r3, [r1, #0]
 8005372:	1b5b      	subs	r3, r3, r5
 8005374:	d418      	bmi.n	80053a8 <_malloc_r+0x8c>
 8005376:	2b0b      	cmp	r3, #11
 8005378:	d90f      	bls.n	800539a <_malloc_r+0x7e>
 800537a:	600b      	str	r3, [r1, #0]
 800537c:	50cd      	str	r5, [r1, r3]
 800537e:	18cc      	adds	r4, r1, r3
 8005380:	4630      	mov	r0, r6
 8005382:	f000 f85c 	bl	800543e <__malloc_unlock>
 8005386:	f104 000b 	add.w	r0, r4, #11
 800538a:	1d23      	adds	r3, r4, #4
 800538c:	f020 0007 	bic.w	r0, r0, #7
 8005390:	1ac3      	subs	r3, r0, r3
 8005392:	d0d3      	beq.n	800533c <_malloc_r+0x20>
 8005394:	425a      	negs	r2, r3
 8005396:	50e2      	str	r2, [r4, r3]
 8005398:	e7d0      	b.n	800533c <_malloc_r+0x20>
 800539a:	428c      	cmp	r4, r1
 800539c:	684b      	ldr	r3, [r1, #4]
 800539e:	bf16      	itet	ne
 80053a0:	6063      	strne	r3, [r4, #4]
 80053a2:	6013      	streq	r3, [r2, #0]
 80053a4:	460c      	movne	r4, r1
 80053a6:	e7eb      	b.n	8005380 <_malloc_r+0x64>
 80053a8:	460c      	mov	r4, r1
 80053aa:	6849      	ldr	r1, [r1, #4]
 80053ac:	e7cc      	b.n	8005348 <_malloc_r+0x2c>
 80053ae:	1cc4      	adds	r4, r0, #3
 80053b0:	f024 0403 	bic.w	r4, r4, #3
 80053b4:	42a0      	cmp	r0, r4
 80053b6:	d005      	beq.n	80053c4 <_malloc_r+0xa8>
 80053b8:	1a21      	subs	r1, r4, r0
 80053ba:	4630      	mov	r0, r6
 80053bc:	f000 f82e 	bl	800541c <_sbrk_r>
 80053c0:	3001      	adds	r0, #1
 80053c2:	d0cf      	beq.n	8005364 <_malloc_r+0x48>
 80053c4:	6025      	str	r5, [r4, #0]
 80053c6:	e7db      	b.n	8005380 <_malloc_r+0x64>
 80053c8:	200040a0 	.word	0x200040a0
 80053cc:	200040a4 	.word	0x200040a4

080053d0 <_realloc_r>:
 80053d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d2:	4607      	mov	r7, r0
 80053d4:	4614      	mov	r4, r2
 80053d6:	460e      	mov	r6, r1
 80053d8:	b921      	cbnz	r1, 80053e4 <_realloc_r+0x14>
 80053da:	4611      	mov	r1, r2
 80053dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80053e0:	f7ff bf9c 	b.w	800531c <_malloc_r>
 80053e4:	b922      	cbnz	r2, 80053f0 <_realloc_r+0x20>
 80053e6:	f7ff ff4b 	bl	8005280 <_free_r>
 80053ea:	4625      	mov	r5, r4
 80053ec:	4628      	mov	r0, r5
 80053ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f0:	f000 f826 	bl	8005440 <_malloc_usable_size_r>
 80053f4:	42a0      	cmp	r0, r4
 80053f6:	d20f      	bcs.n	8005418 <_realloc_r+0x48>
 80053f8:	4621      	mov	r1, r4
 80053fa:	4638      	mov	r0, r7
 80053fc:	f7ff ff8e 	bl	800531c <_malloc_r>
 8005400:	4605      	mov	r5, r0
 8005402:	2800      	cmp	r0, #0
 8005404:	d0f2      	beq.n	80053ec <_realloc_r+0x1c>
 8005406:	4631      	mov	r1, r6
 8005408:	4622      	mov	r2, r4
 800540a:	f7ff fc11 	bl	8004c30 <memcpy>
 800540e:	4631      	mov	r1, r6
 8005410:	4638      	mov	r0, r7
 8005412:	f7ff ff35 	bl	8005280 <_free_r>
 8005416:	e7e9      	b.n	80053ec <_realloc_r+0x1c>
 8005418:	4635      	mov	r5, r6
 800541a:	e7e7      	b.n	80053ec <_realloc_r+0x1c>

0800541c <_sbrk_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	4c06      	ldr	r4, [pc, #24]	; (8005438 <_sbrk_r+0x1c>)
 8005420:	2300      	movs	r3, #0
 8005422:	4605      	mov	r5, r0
 8005424:	4608      	mov	r0, r1
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	f7fc f832 	bl	8001490 <_sbrk>
 800542c:	1c43      	adds	r3, r0, #1
 800542e:	d102      	bne.n	8005436 <_sbrk_r+0x1a>
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	b103      	cbz	r3, 8005436 <_sbrk_r+0x1a>
 8005434:	602b      	str	r3, [r5, #0]
 8005436:	bd38      	pop	{r3, r4, r5, pc}
 8005438:	2000414c 	.word	0x2000414c

0800543c <__malloc_lock>:
 800543c:	4770      	bx	lr

0800543e <__malloc_unlock>:
 800543e:	4770      	bx	lr

08005440 <_malloc_usable_size_r>:
 8005440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005444:	1f18      	subs	r0, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	bfbc      	itt	lt
 800544a:	580b      	ldrlt	r3, [r1, r0]
 800544c:	18c0      	addlt	r0, r0, r3
 800544e:	4770      	bx	lr

08005450 <_init>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	bf00      	nop
 8005454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005456:	bc08      	pop	{r3}
 8005458:	469e      	mov	lr, r3
 800545a:	4770      	bx	lr

0800545c <_fini>:
 800545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545e:	bf00      	nop
 8005460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005462:	bc08      	pop	{r3}
 8005464:	469e      	mov	lr, r3
 8005466:	4770      	bx	lr
